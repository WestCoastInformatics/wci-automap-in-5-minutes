/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a mapping from a concept in one terminology to a concept in another
 */
@JsonPropertyOrder({
  Mapping.JSON_PROPERTY_CATEGORY,
  Mapping.JSON_PROPERTY_GROUP,
  Mapping.JSON_PROPERTY_RULE,
  Mapping.JSON_PROPERTY_ADVICE,
  Mapping.JSON_PROPERTY_ENTITY_TYPE,
  Mapping.JSON_PROPERTY_FROM_TERMINOLOGY,
  Mapping.JSON_PROPERTY_FROM_CODE,
  Mapping.JSON_PROPERTY_TO_CODE,
  Mapping.JSON_PROPERTY_TO_NAME,
  Mapping.JSON_PROPERTY_TO_TERMINOLOGY,
  Mapping.JSON_PROPERTY_FROM_NAME,
  Mapping.JSON_PROPERTY_MAPSET_CODE,
  Mapping.JSON_PROPERTY_PRIORITY,
  Mapping.JSON_PROPERTY_LOCAL,
  Mapping.JSON_PROPERTY_MODIFIED_BY,
  Mapping.JSON_PROPERTY_CREATED,
  Mapping.JSON_PROPERTY_MODIFIED,
  Mapping.JSON_PROPERTY_ID,
  Mapping.JSON_PROPERTY_ACTIVE,
  Mapping.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Mapping {
  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_GROUP = "group";
  private String group;

  public static final String JSON_PROPERTY_RULE = "rule";
  private String rule;

  public static final String JSON_PROPERTY_ADVICE = "advice";
  private String advice;

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private String entityType;

  public static final String JSON_PROPERTY_FROM_TERMINOLOGY = "fromTerminology";
  private String fromTerminology;

  public static final String JSON_PROPERTY_FROM_CODE = "fromCode";
  private String fromCode;

  public static final String JSON_PROPERTY_TO_CODE = "toCode";
  private String toCode;

  public static final String JSON_PROPERTY_TO_NAME = "toName";
  private String toName;

  public static final String JSON_PROPERTY_TO_TERMINOLOGY = "toTerminology";
  private String toTerminology;

  public static final String JSON_PROPERTY_FROM_NAME = "fromName";
  private String fromName;

  public static final String JSON_PROPERTY_MAPSET_CODE = "mapsetCode";
  private String mapsetCode;

  public static final String JSON_PROPERTY_PRIORITY = "priority";
  private String priority;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public Mapping() { 
  }

  public Mapping category(String category) {
    this.category = category;
    return this;
  }

   /**
   * the map category (for RF2-based maps)
   * @return category
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(String category) {
    this.category = category;
  }


  public Mapping group(String group) {
    this.group = group;
    return this;
  }

   /**
   * the value for the group this map participates in (for complex maps that use groups)
   * @return group
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroup() {
    return group;
  }


  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroup(String group) {
    this.group = group;
  }


  public Mapping rule(String rule) {
    this.rule = rule;
    return this;
  }

   /**
   * the machine-readable map rule for this mapping (for complex maps that use rules)
   * @return rule
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRule() {
    return rule;
  }


  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRule(String rule) {
    this.rule = rule;
  }


  public Mapping advice(String advice) {
    this.advice = advice;
    return this;
  }

   /**
   * the map advice
   * @return advice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdvice() {
    return advice;
  }


  @JsonProperty(JSON_PROPERTY_ADVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdvice(String advice) {
    this.advice = advice;
  }


  public Mapping entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * The cinical class type of information related to this map, e.g. &#39;condition&#39;, &#39;procedure&#39;, &#39;medication&#39;, etc.
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public Mapping fromTerminology(String fromTerminology) {
    this.fromTerminology = fromTerminology;
    return this;
  }

   /**
   * the terminology of the &#39;from&#39; code
   * @return fromTerminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFromTerminology() {
    return fromTerminology;
  }


  @JsonProperty(JSON_PROPERTY_FROM_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromTerminology(String fromTerminology) {
    this.fromTerminology = fromTerminology;
  }


  public Mapping fromCode(String fromCode) {
    this.fromCode = fromCode;
    return this;
  }

   /**
   * the &#39;from&#39; code (the left-hand side)
   * @return fromCode
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFromCode() {
    return fromCode;
  }


  @JsonProperty(JSON_PROPERTY_FROM_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromCode(String fromCode) {
    this.fromCode = fromCode;
  }


  public Mapping toCode(String toCode) {
    this.toCode = toCode;
    return this;
  }

   /**
   * the &#39;to&#39; code (the left-hand side)
   * @return toCode
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToCode() {
    return toCode;
  }


  @JsonProperty(JSON_PROPERTY_TO_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToCode(String toCode) {
    this.toCode = toCode;
  }


  public Mapping toName(String toName) {
    this.toName = toName;
    return this;
  }

   /**
   * the name of the &#39;to&#39; code
   * @return toName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToName() {
    return toName;
  }


  @JsonProperty(JSON_PROPERTY_TO_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToName(String toName) {
    this.toName = toName;
  }


  public Mapping toTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
    return this;
  }

   /**
   * the terminology of the &#39;to&#39; code
   * @return toTerminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToTerminology() {
    return toTerminology;
  }


  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
  }


  public Mapping fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

   /**
   * the name of the &#39;from&#39; code
   * @return fromName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFromName() {
    return fromName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public Mapping mapsetCode(String mapsetCode) {
    this.mapsetCode = mapsetCode;
    return this;
  }

   /**
   * the code of the mapset containing this mapping
   * @return mapsetCode
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAPSET_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMapsetCode() {
    return mapsetCode;
  }


  @JsonProperty(JSON_PROPERTY_MAPSET_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMapsetCode(String mapsetCode) {
    this.mapsetCode = mapsetCode;
  }


  public Mapping priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * the value for the priority of this map within its group (for complex maps that use groups)
   * @return priority
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPriority() {
    return priority;
  }


  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Mapping local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Mapping modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Mapping created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public Mapping modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public Mapping id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Mapping active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Mapping attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Mapping putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this Mapping object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mapping mapping = (Mapping) o;
    return Objects.equals(this.category, mapping.category) &&
        Objects.equals(this.group, mapping.group) &&
        Objects.equals(this.rule, mapping.rule) &&
        Objects.equals(this.advice, mapping.advice) &&
        Objects.equals(this.entityType, mapping.entityType) &&
        Objects.equals(this.fromTerminology, mapping.fromTerminology) &&
        Objects.equals(this.fromCode, mapping.fromCode) &&
        Objects.equals(this.toCode, mapping.toCode) &&
        Objects.equals(this.toName, mapping.toName) &&
        Objects.equals(this.toTerminology, mapping.toTerminology) &&
        Objects.equals(this.fromName, mapping.fromName) &&
        Objects.equals(this.mapsetCode, mapping.mapsetCode) &&
        Objects.equals(this.priority, mapping.priority) &&
        Objects.equals(this.local, mapping.local) &&
        Objects.equals(this.modifiedBy, mapping.modifiedBy) &&
        Objects.equals(this.created, mapping.created) &&
        Objects.equals(this.modified, mapping.modified) &&
        Objects.equals(this.id, mapping.id) &&
        Objects.equals(this.active, mapping.active) &&
        Objects.equals(this.attributes, mapping.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, group, rule, advice, entityType, fromTerminology, fromCode, toCode, toName, toTerminology, fromName, mapsetCode, priority, local, modifiedBy, created, modified, id, active, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mapping {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    fromTerminology: ").append(toIndentedString(fromTerminology)).append("\n");
    sb.append("    fromCode: ").append(toIndentedString(fromCode)).append("\n");
    sb.append("    toCode: ").append(toIndentedString(toCode)).append("\n");
    sb.append("    toName: ").append(toIndentedString(toName)).append("\n");
    sb.append("    toTerminology: ").append(toIndentedString(toTerminology)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    mapsetCode: ").append(toIndentedString(mapsetCode)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

