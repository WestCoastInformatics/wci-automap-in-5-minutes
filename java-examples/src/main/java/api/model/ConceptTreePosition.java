/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.Concept;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a concept position in a hierarchical tree with a path to the root
 */
@JsonPropertyOrder({
  ConceptTreePosition.JSON_PROPERTY_CHILDREN,
  ConceptTreePosition.JSON_PROPERTY_ANCESTOR_PATH,
  ConceptTreePosition.JSON_PROPERTY_CHILD_CT,
  ConceptTreePosition.JSON_PROPERTY_CONCEPT,
  ConceptTreePosition.JSON_PROPERTY_LEVEL,
  ConceptTreePosition.JSON_PROPERTY_CODE,
  ConceptTreePosition.JSON_PROPERTY_ADDITIONAL_TYPE,
  ConceptTreePosition.JSON_PROPERTY_LOCAL,
  ConceptTreePosition.JSON_PROPERTY_MODIFIED_BY,
  ConceptTreePosition.JSON_PROPERTY_CREATED,
  ConceptTreePosition.JSON_PROPERTY_MODIFIED,
  ConceptTreePosition.JSON_PROPERTY_ID,
  ConceptTreePosition.JSON_PROPERTY_ACTIVE,
  ConceptTreePosition.JSON_PROPERTY_NAME,
  ConceptTreePosition.JSON_PROPERTY_TERMINOLOGY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class ConceptTreePosition {
  public static final String JSON_PROPERTY_CHILDREN = "children";
  private List<ConceptTreePosition> children = new ArrayList<>();

  public static final String JSON_PROPERTY_ANCESTOR_PATH = "ancestorPath";
  private String ancestorPath;

  public static final String JSON_PROPERTY_CHILD_CT = "childCt";
  private Integer childCt;

  public static final String JSON_PROPERTY_CONCEPT = "concept";
  private Concept concept;

  public static final String JSON_PROPERTY_LEVEL = "level";
  private Integer level;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_ADDITIONAL_TYPE = "additionalType";
  private String additionalType;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public ConceptTreePosition() { 
  }

  public ConceptTreePosition children(List<ConceptTreePosition> children) {
    this.children = children;
    return this;
  }

  public ConceptTreePosition addChildrenItem(ConceptTreePosition childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * the child tree positions of this node
   * @return children
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConceptTreePosition> getChildren() {
    return children;
  }


  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChildren(List<ConceptTreePosition> children) {
    this.children = children;
  }


  public ConceptTreePosition ancestorPath(String ancestorPath) {
    this.ancestorPath = ancestorPath;
    return this;
  }

   /**
   * the path from the root code expressed as a sequence of dot (.) separated code values starting with the root and ending with the parent code
   * @return ancestorPath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANCESTOR_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAncestorPath() {
    return ancestorPath;
  }


  @JsonProperty(JSON_PROPERTY_ANCESTOR_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAncestorPath(String ancestorPath) {
    this.ancestorPath = ancestorPath;
  }


  public ConceptTreePosition childCt(Integer childCt) {
    this.childCt = childCt;
    return this;
  }

   /**
   * the child count of this node
   * @return childCt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHILD_CT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getChildCt() {
    return childCt;
  }


  @JsonProperty(JSON_PROPERTY_CHILD_CT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChildCt(Integer childCt) {
    this.childCt = childCt;
  }


  public ConceptTreePosition concept(Concept concept) {
    this.concept = concept;
    return this;
  }

   /**
   * Get concept
   * @return concept
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Concept getConcept() {
    return concept;
  }


  @JsonProperty(JSON_PROPERTY_CONCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcept(Concept concept) {
    this.concept = concept;
  }


  public ConceptTreePosition level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * the level of depth in the hierarchy of this node
   * @return level
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLevel() {
    return level;
  }


  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLevel(Integer level) {
    this.level = level;
  }


  public ConceptTreePosition code(String code) {
    this.code = code;
    return this;
  }

   /**
   * the code in the specified terminology
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public ConceptTreePosition additionalType(String additionalType) {
    this.additionalType = additionalType;
    return this;
  }

   /**
   * the more specific type of relationship (more information about this label is provided in the terminology metadata)
   * @return additionalType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalType() {
    return additionalType;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalType(String additionalType) {
    this.additionalType = additionalType;
  }


  public ConceptTreePosition local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public ConceptTreePosition modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public ConceptTreePosition created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public ConceptTreePosition modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public ConceptTreePosition id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public ConceptTreePosition active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public ConceptTreePosition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ConceptTreePosition terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  /**
   * Return true if this ConceptTreePosition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptTreePosition conceptTreePosition = (ConceptTreePosition) o;
    return Objects.equals(this.children, conceptTreePosition.children) &&
        Objects.equals(this.ancestorPath, conceptTreePosition.ancestorPath) &&
        Objects.equals(this.childCt, conceptTreePosition.childCt) &&
        Objects.equals(this.concept, conceptTreePosition.concept) &&
        Objects.equals(this.level, conceptTreePosition.level) &&
        Objects.equals(this.code, conceptTreePosition.code) &&
        Objects.equals(this.additionalType, conceptTreePosition.additionalType) &&
        Objects.equals(this.local, conceptTreePosition.local) &&
        Objects.equals(this.modifiedBy, conceptTreePosition.modifiedBy) &&
        Objects.equals(this.created, conceptTreePosition.created) &&
        Objects.equals(this.modified, conceptTreePosition.modified) &&
        Objects.equals(this.id, conceptTreePosition.id) &&
        Objects.equals(this.active, conceptTreePosition.active) &&
        Objects.equals(this.name, conceptTreePosition.name) &&
        Objects.equals(this.terminology, conceptTreePosition.terminology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, ancestorPath, childCt, concept, level, code, additionalType, local, modifiedBy, created, modified, id, active, name, terminology);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptTreePosition {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    ancestorPath: ").append(toIndentedString(ancestorPath)).append("\n");
    sb.append("    childCt: ").append(toIndentedString(childCt)).append("\n");
    sb.append("    concept: ").append(toIndentedString(concept)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    additionalType: ").append(toIndentedString(additionalType)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

