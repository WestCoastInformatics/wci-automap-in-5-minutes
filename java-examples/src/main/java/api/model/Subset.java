/*
 * WCI Automap API
 * <p>API documentation for the West Coast Informatics Automated Term Mapping Service.</p><p>For developer documentation and examples, see on GitHub <a href=\"https://github.com/westCoastInformatics/wci-automap-in-5-minutes\">WCI Automap in 5 Minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a subset of concepts in a terminology grouped for a particular reason or use case
 */
@JsonPropertyOrder({
  Subset.JSON_PROPERTY_QUERY,
  Subset.JSON_PROPERTY_VERSION,
  Subset.JSON_PROPERTY_REFERENCED_TERMINOLOGY_CODES,
  Subset.JSON_PROPERTY_MEMBER_IDS,
  Subset.JSON_PROPERTY_EDITORIAL_POLICY,
  Subset.JSON_PROPERTY_UNIVERSE_SUBSET,
  Subset.JSON_PROPERTY_GENERATOR,
  Subset.JSON_PROPERTY_UPGRADE_GENERATOR,
  Subset.JSON_PROPERTY_DERIVED_FROM_SUBSET,
  Subset.JSON_PROPERTY_DISJOINT_SUBSETS,
  Subset.JSON_PROPERTY_WORKFLOW_STATUS,
  Subset.JSON_PROPERTY_PUBLISHABLE,
  Subset.JSON_PROPERTY_DESCENDANTS_GENERATOR,
  Subset.JSON_PROPERTY_REFERENCED_SUBSET_CODES,
  Subset.JSON_PROPERTY_DESCRIPTION,
  Subset.JSON_PROPERTY_ENTITY_TYPE,
  Subset.JSON_PROPERTY_CATEGORY,
  Subset.JSON_PROPERTY_CODE,
  Subset.JSON_PROPERTY_STYLE,
  Subset.JSON_PROPERTY_SCOPE,
  Subset.JSON_PROPERTY_LOCAL,
  Subset.JSON_PROPERTY_MODIFIED,
  Subset.JSON_PROPERTY_MODIFIED_BY,
  Subset.JSON_PROPERTY_CREATED,
  Subset.JSON_PROPERTY_ID,
  Subset.JSON_PROPERTY_ACTIVE,
  Subset.JSON_PROPERTY_NAME,
  Subset.JSON_PROPERTY_TERMINOLOGY,
  Subset.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T18:58:01.210254-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Subset {
  public static final String JSON_PROPERTY_QUERY = "query";
  private String query;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_REFERENCED_TERMINOLOGY_CODES = "referencedTerminologyCodes";
  private Set<String> referencedTerminologyCodes = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_MEMBER_IDS = "memberIds";
  private Set<String> memberIds = new LinkedHashSet<>();

  /**
   * Gets or Sets editorialPolicy
   */
  public enum EditorialPolicyEnum {
    SNOMEDCT("SNOMEDCT"),
    
    DEFAULT("DEFAULT"),
    
    NONE("NONE");

    private String value;

    EditorialPolicyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EditorialPolicyEnum fromValue(String value) {
      for (EditorialPolicyEnum b : EditorialPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EDITORIAL_POLICY = "editorialPolicy";
  private EditorialPolicyEnum editorialPolicy;

  public static final String JSON_PROPERTY_UNIVERSE_SUBSET = "universeSubset";
  private String universeSubset;

  public static final String JSON_PROPERTY_GENERATOR = "generator";
  private String generator;

  public static final String JSON_PROPERTY_UPGRADE_GENERATOR = "upgradeGenerator";
  private String upgradeGenerator;

  public static final String JSON_PROPERTY_DERIVED_FROM_SUBSET = "derivedFromSubset";
  private String derivedFromSubset;

  public static final String JSON_PROPERTY_DISJOINT_SUBSETS = "disjointSubsets";
  private Set<String> disjointSubsets = new LinkedHashSet<>();

  /**
   * Gets or Sets workflowStatus
   */
  public enum WorkflowStatusEnum {
    NEW("NEW"),
    
    WORK("WORK"),
    
    FUTURE("FUTURE"),
    
    NEEDS_REVIEW("NEEDS_REVIEW"),
    
    QA_ISSUE("QA_ISSUE"),
    
    UPGRADE_REVIEW("UPGRADE_REVIEW"),
    
    UPGRADE_INACTIVATE("UPGRADE_INACTIVATE"),
    
    UPGRADE_REPLACED("UPGRADE_REPLACED"),
    
    UPGRADE_NEW("UPGRADE_NEW"),
    
    READY_FOR_PUBLICATION("READY_FOR_PUBLICATION"),
    
    REMOVED("REMOVED"),
    
    PUBLISHED("PUBLISHED");

    private String value;

    WorkflowStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WorkflowStatusEnum fromValue(String value) {
      for (WorkflowStatusEnum b : WorkflowStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WORKFLOW_STATUS = "workflowStatus";
  private WorkflowStatusEnum workflowStatus;

  public static final String JSON_PROPERTY_PUBLISHABLE = "publishable";
  private Boolean publishable;

  public static final String JSON_PROPERTY_DESCENDANTS_GENERATOR = "descendantsGenerator";
  private String descendantsGenerator;

  public static final String JSON_PROPERTY_REFERENCED_SUBSET_CODES = "referencedSubsetCodes";
  private Set<String> referencedSubsetCodes = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private String entityType;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  /**
   * Gets or Sets style
   */
  public enum StyleEnum {
    MANUAL("MANUAL"),
    
    UUID("UUID"),
    
    TERMLIST("TERMLIST"),
    
    GENERATED("GENERATED");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StyleEnum fromValue(String value) {
      for (StyleEnum b : StyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STYLE = "style";
  private StyleEnum style;

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private String scope;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public Subset() { 
  }

  public Subset query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuery(String query) {
    this.query = query;
  }


  public Subset version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public Subset referencedTerminologyCodes(Set<String> referencedTerminologyCodes) {
    this.referencedTerminologyCodes = referencedTerminologyCodes;
    return this;
  }

  public Subset addReferencedTerminologyCodesItem(String referencedTerminologyCodesItem) {
    if (this.referencedTerminologyCodes == null) {
      this.referencedTerminologyCodes = new LinkedHashSet<>();
    }
    this.referencedTerminologyCodes.add(referencedTerminologyCodesItem);
    return this;
  }

   /**
   * Get referencedTerminologyCodes
   * @return referencedTerminologyCodes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCED_TERMINOLOGY_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getReferencedTerminologyCodes() {
    return referencedTerminologyCodes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_REFERENCED_TERMINOLOGY_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferencedTerminologyCodes(Set<String> referencedTerminologyCodes) {
    this.referencedTerminologyCodes = referencedTerminologyCodes;
  }


  public Subset memberIds(Set<String> memberIds) {
    this.memberIds = memberIds;
    return this;
  }

  public Subset addMemberIdsItem(String memberIdsItem) {
    if (this.memberIds == null) {
      this.memberIds = new LinkedHashSet<>();
    }
    this.memberIds.add(memberIdsItem);
    return this;
  }

   /**
   * the codes for members of the subset
   * @return memberIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEMBER_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getMemberIds() {
    return memberIds;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_MEMBER_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemberIds(Set<String> memberIds) {
    this.memberIds = memberIds;
  }


  public Subset editorialPolicy(EditorialPolicyEnum editorialPolicy) {
    this.editorialPolicy = editorialPolicy;
    return this;
  }

   /**
   * Get editorialPolicy
   * @return editorialPolicy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDITORIAL_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EditorialPolicyEnum getEditorialPolicy() {
    return editorialPolicy;
  }


  @JsonProperty(JSON_PROPERTY_EDITORIAL_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEditorialPolicy(EditorialPolicyEnum editorialPolicy) {
    this.editorialPolicy = editorialPolicy;
  }


  public Subset universeSubset(String universeSubset) {
    this.universeSubset = universeSubset;
    return this;
  }

   /**
   * Get universeSubset
   * @return universeSubset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIVERSE_SUBSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUniverseSubset() {
    return universeSubset;
  }


  @JsonProperty(JSON_PROPERTY_UNIVERSE_SUBSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniverseSubset(String universeSubset) {
    this.universeSubset = universeSubset;
  }


  public Subset generator(String generator) {
    this.generator = generator;
    return this;
  }

   /**
   * Get generator
   * @return generator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GENERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGenerator() {
    return generator;
  }


  @JsonProperty(JSON_PROPERTY_GENERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGenerator(String generator) {
    this.generator = generator;
  }


  public Subset upgradeGenerator(String upgradeGenerator) {
    this.upgradeGenerator = upgradeGenerator;
    return this;
  }

   /**
   * Get upgradeGenerator
   * @return upgradeGenerator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPGRADE_GENERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpgradeGenerator() {
    return upgradeGenerator;
  }


  @JsonProperty(JSON_PROPERTY_UPGRADE_GENERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpgradeGenerator(String upgradeGenerator) {
    this.upgradeGenerator = upgradeGenerator;
  }


  public Subset derivedFromSubset(String derivedFromSubset) {
    this.derivedFromSubset = derivedFromSubset;
    return this;
  }

   /**
   * Get derivedFromSubset
   * @return derivedFromSubset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DERIVED_FROM_SUBSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDerivedFromSubset() {
    return derivedFromSubset;
  }


  @JsonProperty(JSON_PROPERTY_DERIVED_FROM_SUBSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDerivedFromSubset(String derivedFromSubset) {
    this.derivedFromSubset = derivedFromSubset;
  }


  public Subset disjointSubsets(Set<String> disjointSubsets) {
    this.disjointSubsets = disjointSubsets;
    return this;
  }

  public Subset addDisjointSubsetsItem(String disjointSubsetsItem) {
    if (this.disjointSubsets == null) {
      this.disjointSubsets = new LinkedHashSet<>();
    }
    this.disjointSubsets.add(disjointSubsetsItem);
    return this;
  }

   /**
   * Get disjointSubsets
   * @return disjointSubsets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISJOINT_SUBSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getDisjointSubsets() {
    return disjointSubsets;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_DISJOINT_SUBSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisjointSubsets(Set<String> disjointSubsets) {
    this.disjointSubsets = disjointSubsets;
  }


  public Subset workflowStatus(WorkflowStatusEnum workflowStatus) {
    this.workflowStatus = workflowStatus;
    return this;
  }

   /**
   * Get workflowStatus
   * @return workflowStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKFLOW_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WorkflowStatusEnum getWorkflowStatus() {
    return workflowStatus;
  }


  @JsonProperty(JSON_PROPERTY_WORKFLOW_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkflowStatus(WorkflowStatusEnum workflowStatus) {
    this.workflowStatus = workflowStatus;
  }


  public Subset publishable(Boolean publishable) {
    this.publishable = publishable;
    return this;
  }

   /**
   * Get publishable
   * @return publishable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPublishable() {
    return publishable;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublishable(Boolean publishable) {
    this.publishable = publishable;
  }


  public Subset descendantsGenerator(String descendantsGenerator) {
    this.descendantsGenerator = descendantsGenerator;
    return this;
  }

   /**
   * Get descendantsGenerator
   * @return descendantsGenerator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCENDANTS_GENERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescendantsGenerator() {
    return descendantsGenerator;
  }


  @JsonProperty(JSON_PROPERTY_DESCENDANTS_GENERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescendantsGenerator(String descendantsGenerator) {
    this.descendantsGenerator = descendantsGenerator;
  }


  public Subset referencedSubsetCodes(Set<String> referencedSubsetCodes) {
    this.referencedSubsetCodes = referencedSubsetCodes;
    return this;
  }

  public Subset addReferencedSubsetCodesItem(String referencedSubsetCodesItem) {
    if (this.referencedSubsetCodes == null) {
      this.referencedSubsetCodes = new LinkedHashSet<>();
    }
    this.referencedSubsetCodes.add(referencedSubsetCodesItem);
    return this;
  }

   /**
   * Get referencedSubsetCodes
   * @return referencedSubsetCodes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCED_SUBSET_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getReferencedSubsetCodes() {
    return referencedSubsetCodes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_REFERENCED_SUBSET_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferencedSubsetCodes(Set<String> referencedSubsetCodes) {
    this.referencedSubsetCodes = referencedSubsetCodes;
  }


  public Subset description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Subset entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public Subset category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(String category) {
    this.category = category;
  }


  public Subset code(String code) {
    this.code = code;
    return this;
  }

   /**
   * the subset code
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public Subset style(StyleEnum style) {
    this.style = style;
    return this;
  }

   /**
   * Get style
   * @return style
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StyleEnum getStyle() {
    return style;
  }


  @JsonProperty(JSON_PROPERTY_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStyle(StyleEnum style) {
    this.style = style;
  }


  public Subset scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(String scope) {
    this.scope = scope;
  }


  public Subset local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Subset modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public Subset modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Subset created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public Subset id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Subset active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Subset name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Subset terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public Subset attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Subset putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this Subset object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subset subset = (Subset) o;
    return Objects.equals(this.query, subset.query) &&
        Objects.equals(this.version, subset.version) &&
        Objects.equals(this.referencedTerminologyCodes, subset.referencedTerminologyCodes) &&
        Objects.equals(this.memberIds, subset.memberIds) &&
        Objects.equals(this.editorialPolicy, subset.editorialPolicy) &&
        Objects.equals(this.universeSubset, subset.universeSubset) &&
        Objects.equals(this.generator, subset.generator) &&
        Objects.equals(this.upgradeGenerator, subset.upgradeGenerator) &&
        Objects.equals(this.derivedFromSubset, subset.derivedFromSubset) &&
        Objects.equals(this.disjointSubsets, subset.disjointSubsets) &&
        Objects.equals(this.workflowStatus, subset.workflowStatus) &&
        Objects.equals(this.publishable, subset.publishable) &&
        Objects.equals(this.descendantsGenerator, subset.descendantsGenerator) &&
        Objects.equals(this.referencedSubsetCodes, subset.referencedSubsetCodes) &&
        Objects.equals(this.description, subset.description) &&
        Objects.equals(this.entityType, subset.entityType) &&
        Objects.equals(this.category, subset.category) &&
        Objects.equals(this.code, subset.code) &&
        Objects.equals(this.style, subset.style) &&
        Objects.equals(this.scope, subset.scope) &&
        Objects.equals(this.local, subset.local) &&
        Objects.equals(this.modified, subset.modified) &&
        Objects.equals(this.modifiedBy, subset.modifiedBy) &&
        Objects.equals(this.created, subset.created) &&
        Objects.equals(this.id, subset.id) &&
        Objects.equals(this.active, subset.active) &&
        Objects.equals(this.name, subset.name) &&
        Objects.equals(this.terminology, subset.terminology) &&
        Objects.equals(this.attributes, subset.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, version, referencedTerminologyCodes, memberIds, editorialPolicy, universeSubset, generator, upgradeGenerator, derivedFromSubset, disjointSubsets, workflowStatus, publishable, descendantsGenerator, referencedSubsetCodes, description, entityType, category, code, style, scope, local, modified, modifiedBy, created, id, active, name, terminology, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subset {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    referencedTerminologyCodes: ").append(toIndentedString(referencedTerminologyCodes)).append("\n");
    sb.append("    memberIds: ").append(toIndentedString(memberIds)).append("\n");
    sb.append("    editorialPolicy: ").append(toIndentedString(editorialPolicy)).append("\n");
    sb.append("    universeSubset: ").append(toIndentedString(universeSubset)).append("\n");
    sb.append("    generator: ").append(toIndentedString(generator)).append("\n");
    sb.append("    upgradeGenerator: ").append(toIndentedString(upgradeGenerator)).append("\n");
    sb.append("    derivedFromSubset: ").append(toIndentedString(derivedFromSubset)).append("\n");
    sb.append("    disjointSubsets: ").append(toIndentedString(disjointSubsets)).append("\n");
    sb.append("    workflowStatus: ").append(toIndentedString(workflowStatus)).append("\n");
    sb.append("    publishable: ").append(toIndentedString(publishable)).append("\n");
    sb.append("    descendantsGenerator: ").append(toIndentedString(descendantsGenerator)).append("\n");
    sb.append("    referencedSubsetCodes: ").append(toIndentedString(referencedSubsetCodes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

