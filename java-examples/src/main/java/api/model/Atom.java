/*
 * WCI Automap API
 * <p>API documentation for the West Coast Informatics Automated Term Mapping Service.</p><p>For developer documentation and examples, see on GitHub <a href=\"https://github.com/westCoastInformatics/wci-automap-in-5-minutes\">WCI Automap in 5 Minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a name with a term type that contributes meaning to a concept
 */
@JsonPropertyOrder({
  Atom.JSON_PROPERTY_CONCEPT_ID,
  Atom.JSON_PROPERTY_DESCRIPTOR_ID,
  Atom.JSON_PROPERTY_LOCALE_MAP,
  Atom.JSON_PROPERTY_TERM_TYPE,
  Atom.JSON_PROPERTY_CODE_ID,
  Atom.JSON_PROPERTY_LOCAL,
  Atom.JSON_PROPERTY_MODIFIED,
  Atom.JSON_PROPERTY_MODIFIED_BY,
  Atom.JSON_PROPERTY_CREATED,
  Atom.JSON_PROPERTY_ID,
  Atom.JSON_PROPERTY_ACTIVE,
  Atom.JSON_PROPERTY_NAME,
  Atom.JSON_PROPERTY_TERMINOLOGY_ID,
  Atom.JSON_PROPERTY_TERMINOLOGY,
  Atom.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T18:58:01.210254-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Atom {
  public static final String JSON_PROPERTY_CONCEPT_ID = "conceptId";
  private String conceptId;

  public static final String JSON_PROPERTY_DESCRIPTOR_ID = "descriptorId";
  private String descriptorId;

  public static final String JSON_PROPERTY_LOCALE_MAP = "localeMap";
  private Map<String, Boolean> localeMap = new HashMap<>();

  public static final String JSON_PROPERTY_TERM_TYPE = "termType";
  private String termType;

  public static final String JSON_PROPERTY_CODE_ID = "codeId";
  private String codeId;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TERMINOLOGY_ID = "terminologyId";
  private String terminologyId;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public Atom() { 
  }

  public Atom conceptId(String conceptId) {
    this.conceptId = conceptId;
    return this;
  }

   /**
   * the concept id (for terminologies that use concepts)
   * @return conceptId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCEPT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConceptId() {
    return conceptId;
  }


  @JsonProperty(JSON_PROPERTY_CONCEPT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConceptId(String conceptId) {
    this.conceptId = conceptId;
  }


  public Atom descriptorId(String descriptorId) {
    this.descriptorId = descriptorId;
    return this;
  }

   /**
   * the descriptor id (for terminologies that use descriptors)
   * @return descriptorId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescriptorId() {
    return descriptorId;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescriptorId(String descriptorId) {
    this.descriptorId = descriptorId;
  }


  public Atom localeMap(Map<String, Boolean> localeMap) {
    this.localeMap = localeMap;
    return this;
  }

  public Atom putLocaleMapItem(String key, Boolean localeMapItem) {
    if (this.localeMap == null) {
      this.localeMap = new HashMap<>();
    }
    this.localeMap.put(key, localeMapItem);
    return this;
  }

   /**
   * a map of language codes to boolean values indicated whether this definition is preferred in that language context
   * @return localeMap
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCALE_MAP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, Boolean> getLocaleMap() {
    return localeMap;
  }


  @JsonProperty(JSON_PROPERTY_LOCALE_MAP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocaleMap(Map<String, Boolean> localeMap) {
    this.localeMap = localeMap;
  }


  public Atom termType(String termType) {
    this.termType = termType;
    return this;
  }

   /**
   * the term type
   * @return termType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERM_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTermType() {
    return termType;
  }


  @JsonProperty(JSON_PROPERTY_TERM_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTermType(String termType) {
    this.termType = termType;
  }


  public Atom codeId(String codeId) {
    this.codeId = codeId;
    return this;
  }

   /**
   * the code in the specified terminology
   * @return codeId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCodeId() {
    return codeId;
  }


  @JsonProperty(JSON_PROPERTY_CODE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCodeId(String codeId) {
    this.codeId = codeId;
  }


  public Atom local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Atom modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public Atom modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Atom created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public Atom id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Atom active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Atom name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Atom terminologyId(String terminologyId) {
    this.terminologyId = terminologyId;
    return this;
  }

   /**
   * the identifier asserted by the terminology
   * @return terminologyId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminologyId() {
    return terminologyId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminologyId(String terminologyId) {
    this.terminologyId = terminologyId;
  }


  public Atom terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public Atom attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Atom putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this Atom object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Atom atom = (Atom) o;
    return Objects.equals(this.conceptId, atom.conceptId) &&
        Objects.equals(this.descriptorId, atom.descriptorId) &&
        Objects.equals(this.localeMap, atom.localeMap) &&
        Objects.equals(this.termType, atom.termType) &&
        Objects.equals(this.codeId, atom.codeId) &&
        Objects.equals(this.local, atom.local) &&
        Objects.equals(this.modified, atom.modified) &&
        Objects.equals(this.modifiedBy, atom.modifiedBy) &&
        Objects.equals(this.created, atom.created) &&
        Objects.equals(this.id, atom.id) &&
        Objects.equals(this.active, atom.active) &&
        Objects.equals(this.name, atom.name) &&
        Objects.equals(this.terminologyId, atom.terminologyId) &&
        Objects.equals(this.terminology, atom.terminology) &&
        Objects.equals(this.attributes, atom.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conceptId, descriptorId, localeMap, termType, codeId, local, modified, modifiedBy, created, id, active, name, terminologyId, terminology, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Atom {\n");
    sb.append("    conceptId: ").append(toIndentedString(conceptId)).append("\n");
    sb.append("    descriptorId: ").append(toIndentedString(descriptorId)).append("\n");
    sb.append("    localeMap: ").append(toIndentedString(localeMap)).append("\n");
    sb.append("    termType: ").append(toIndentedString(termType)).append("\n");
    sb.append("    codeId: ").append(toIndentedString(codeId)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminologyId: ").append(toIndentedString(terminologyId)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

