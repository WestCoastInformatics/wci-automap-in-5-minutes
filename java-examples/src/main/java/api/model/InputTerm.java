/*
 * WCI Automap API
 * <p>API documentation for the West Coast Informatics Automated Term Mapping Service.</p><p>For developer documentation and examples, see on GitHub <a href=\"https://github.com/westCoastInformatics/wci-automap-in-5-minutes\">WCI Automap in 5 Minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.Tag;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents an term to be mapped
 */
@JsonPropertyOrder({
  InputTerm.JSON_PROPERTY_CONTEXT,
  InputTerm.JSON_PROPERTY_TO_TERMINOLOGY,
  InputTerm.JSON_PROPERTY_ENTITY_TYPE,
  InputTerm.JSON_PROPERTY_TERMINOLOGY,
  InputTerm.JSON_PROPERTY_INPUT_TYPE,
  InputTerm.JSON_PROPERTY_TASK_ID,
  InputTerm.JSON_PROPERTY_TERM,
  InputTerm.JSON_PROPERTY_CODE,
  InputTerm.JSON_PROPERTY_TAGS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T18:58:01.210254-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class InputTerm {
  public static final String JSON_PROPERTY_CONTEXT = "context";
  private Map<String, String> context = new HashMap<>();

  public static final String JSON_PROPERTY_TO_TERMINOLOGY = "toTerminology";
  private String toTerminology;

  /**
   * Expected entity type to be mapped to.  Allowable values are detailed by the application metadata endpoint
   */
  public enum EntityTypeEnum {
    GENERAL("general"),
    
    ALLERGY("allergy"),
    
    BODYPART("bodyPart"),
    
    DEVICE("device"),
    
    CONDITION("condition"),
    
    FAMILYHISTORY("familyHistory"),
    
    IMMUNIZATION("immunization"),
    
    MEDICATION("medication"),
    
    LABRESULT("labResult"),
    
    LABRESULTUNIT("labResultUnit"),
    
    LABRESULTVALUE("labResultValue"),
    
    LABRESULTINTERPRETATION("labResultInterpretation"),
    
    PROCEDURE("procedure"),
    
    SOCIALHISTORY("socialHistory"),
    
    SUBSTANCE("substance"),
    
    VITALSIGN("vitalSign"),
    
    VITALSIGNUNIT("vitalSignUnit"),
    
    VITALSIGNVALUE("vitalSignValue"),
    
    VITALSIGNINTERPRETATION("vitalSignInterpretation"),
    
    BIOMARKER("biomarker"),
    
    COURSE("course"),
    
    GENDER("gender"),
    
    GRADE("grade"),
    
    HISTOLOGY("histology"),
    
    LINEOFTHERAPY("lineOfTherapy"),
    
    PERFORMANCESTATUS("performanceStatus"),
    
    SEVERITY("severity"),
    
    STAGE("stage"),
    
    TUMORSETTING("tumorSetting"),
    
    UNIT("unit"),
    
    CONDITIONCLINICALSTATUS("conditionClinicalStatus"),
    
    CONDITIONVERIFICATIONSTATUS("conditionVerificationStatus"),
    
    CONDITIONCATEGORY("conditionCategory"),
    
    MEDICATIONSTATUS("medicationStatus"),
    
    MEDICATIONDOSEFORM("medicationDoseForm"),
    
    PROCEDURESTATUS("procedureStatus"),
    
    PROCEDURECATEGORY("procedureCategory"),
    
    OBSERVATIONSTATUS("observationStatus"),
    
    OBSERVATIONCATEGORY("observationCategory"),
    
    ALLERGYCLINICALSTATUS("allergyClinicalStatus"),
    
    ALLERGYVERIFICATIONSTATUS("allergyVerificationStatus"),
    
    ALLERGYTYPE("allergyType"),
    
    ALLERGYCATEGORY("allergyCategory"),
    
    ALLERGYCRITICALITY("allergyCriticality"),
    
    ADVERSEEVENT("adverseEvent"),
    
    BIOMARKERINTERPRETATION("biomarkerInterpretation"),
    
    BIOMARKERMETHOD("biomarkerMethod"),
    
    BIOMARKERRESULT("biomarkerResult"),
    
    DOSEFORM("doseForm"),
    
    LABORDER("labOrder"),
    
    LABPANEL("labPanel"),
    
    SYMPTOM("symptom"),
    
    MULTI("multi"),
    
    OTHER("other");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  /**
   * Expected input type of the thing being mapped.  Allowable values are detailed by the application metadata endpoint
   */
  public enum InputTypeEnum {
    PICKLIST("picklist"),
    
    BOOLEAN("boolean"),
    
    STRING("string"),
    
    PHRASE("phrase"),
    
    FHIRCODING("fhirCoding");

    private String value;

    InputTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InputTypeEnum fromValue(String value) {
      for (InputTypeEnum b : InputTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INPUT_TYPE = "inputType";
  private InputTypeEnum inputType;

  public static final String JSON_PROPERTY_TASK_ID = "taskId";
  private String taskId;

  public static final String JSON_PROPERTY_TERM = "term";
  private String term;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private List<Tag> tags = new ArrayList<>();

  public InputTerm() { 
  }

  public InputTerm context(Map<String, String> context) {
    this.context = context;
    return this;
  }

  public InputTerm putContextItem(String key, String contextItem) {
    if (this.context == null) {
      this.context = new HashMap<>();
    }
    this.context.put(key, contextItem);
    return this;
  }

   /**
   * Additional textual context for disambiguation, including other text around the text of the term
   * @return context
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(Map<String, String> context) {
    this.context = context;
  }


  public InputTerm toTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
    return this;
  }

   /**
   * Terminology of the term to map to, e.g. \&quot;SNOMEDCT\&quot; or \&quot;https://loinc.org\&quot;. Leave blank for all available options specified by config.
   * @return toTerminology
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToTerminology() {
    return toTerminology;
  }


  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
  }


  public InputTerm entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Expected entity type to be mapped to.  Allowable values are detailed by the application metadata endpoint
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public InputTerm terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * Terminology for the term to be mapped, e.g. \&quot;SNOMEDCT\&quot; or \&quot;https://loinc.org\&quot;
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public InputTerm inputType(InputTypeEnum inputType) {
    this.inputType = inputType;
    return this;
  }

   /**
   * Expected input type of the thing being mapped.  Allowable values are detailed by the application metadata endpoint
   * @return inputType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InputTypeEnum getInputType() {
    return inputType;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputType(InputTypeEnum inputType) {
    this.inputType = inputType;
  }


  public InputTerm taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Task id for this term
   * @return taskId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaskId() {
    return taskId;
  }


  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public InputTerm term(String term) {
    this.term = term;
    return this;
  }

   /**
   * Text value to be mapped, e.g. \&quot;heart disease\&quot;
   * @return term
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerm() {
    return term;
  }


  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerm(String term) {
    this.term = term;
  }


  public InputTerm code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code for the term to be mapped, e.g. \&quot;56265001\&quot;
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public InputTerm tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public InputTerm addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * List of key/value tags
   * @return tags
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Tag> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  /**
   * Return true if this InputTerm object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputTerm inputTerm = (InputTerm) o;
    return Objects.equals(this.context, inputTerm.context) &&
        Objects.equals(this.toTerminology, inputTerm.toTerminology) &&
        Objects.equals(this.entityType, inputTerm.entityType) &&
        Objects.equals(this.terminology, inputTerm.terminology) &&
        Objects.equals(this.inputType, inputTerm.inputType) &&
        Objects.equals(this.taskId, inputTerm.taskId) &&
        Objects.equals(this.term, inputTerm.term) &&
        Objects.equals(this.code, inputTerm.code) &&
        Objects.equals(this.tags, inputTerm.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, toTerminology, entityType, terminology, inputType, taskId, term, code, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputTerm {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    toTerminology: ").append(toIndentedString(toTerminology)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    inputType: ").append(toIndentedString(inputType)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

