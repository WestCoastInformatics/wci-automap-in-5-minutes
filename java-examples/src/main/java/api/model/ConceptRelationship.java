/*
 * WCI Automap API
 * <p>API documentation for the West Coast Informatics Automated Term Mapping Service.</p><p>For developer documentation and examples, see on GitHub <a href=\"https://github.com/westCoastInformatics/wci-automap-in-5-minutes\">WCI Automap in 5 Minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.Date;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a relationship between two concepts
 */
@JsonPropertyOrder({
  ConceptRelationship.JSON_PROPERTY_TYPE,
  ConceptRelationship.JSON_PROPERTY_TO_ACTIVE,
  ConceptRelationship.JSON_PROPERTY_TO_TERMINOLOGY,
  ConceptRelationship.JSON_PROPERTY_ASSERTED_DIRECTION,
  ConceptRelationship.JSON_PROPERTY_HIERARCHICAL,
  ConceptRelationship.JSON_PROPERTY_ADDITIONAL_TYPE,
  ConceptRelationship.JSON_PROPERTY_DEFINING,
  ConceptRelationship.JSON_PROPERTY_GROUP,
  ConceptRelationship.JSON_PROPERTY_TO_CODE,
  ConceptRelationship.JSON_PROPERTY_TO_NAME,
  ConceptRelationship.JSON_PROPERTY_TO_VALUE,
  ConceptRelationship.JSON_PROPERTY_LOCAL,
  ConceptRelationship.JSON_PROPERTY_MODIFIED,
  ConceptRelationship.JSON_PROPERTY_MODIFIED_BY,
  ConceptRelationship.JSON_PROPERTY_CREATED,
  ConceptRelationship.JSON_PROPERTY_ID,
  ConceptRelationship.JSON_PROPERTY_ACTIVE,
  ConceptRelationship.JSON_PROPERTY_TERMINOLOGY_ID,
  ConceptRelationship.JSON_PROPERTY_TERMINOLOGY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T18:58:01.210254-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class ConceptRelationship {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_TO_ACTIVE = "toActive";
  private Boolean toActive;

  public static final String JSON_PROPERTY_TO_TERMINOLOGY = "toTerminology";
  private String toTerminology;

  public static final String JSON_PROPERTY_ASSERTED_DIRECTION = "assertedDirection";
  private Boolean assertedDirection;

  public static final String JSON_PROPERTY_HIERARCHICAL = "hierarchical";
  private Boolean hierarchical;

  public static final String JSON_PROPERTY_ADDITIONAL_TYPE = "additionalType";
  private String additionalType;

  public static final String JSON_PROPERTY_DEFINING = "defining";
  private Boolean defining;

  public static final String JSON_PROPERTY_GROUP = "group";
  private String group;

  public static final String JSON_PROPERTY_TO_CODE = "toCode";
  private String toCode;

  public static final String JSON_PROPERTY_TO_NAME = "toName";
  private String toName;

  public static final String JSON_PROPERTY_TO_VALUE = "toValue";
  private String toValue;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_TERMINOLOGY_ID = "terminologyId";
  private String terminologyId;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public ConceptRelationship() { 
  }

  public ConceptRelationship type(String type) {
    this.type = type;
    return this;
  }

   /**
   * the high level type of relationship (more information about this label is provided in the terminology metadata)
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public ConceptRelationship toActive(Boolean toActive) {
    this.toActive = toActive;
    return this;
  }

   /**
   * the active status of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toActive
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getToActive() {
    return toActive;
  }


  @JsonProperty(JSON_PROPERTY_TO_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToActive(Boolean toActive) {
    this.toActive = toActive;
  }


  public ConceptRelationship toTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
    return this;
  }

   /**
   * the terminology of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toTerminology
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToTerminology() {
    return toTerminology;
  }


  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
  }


  public ConceptRelationship assertedDirection(Boolean assertedDirection) {
    this.assertedDirection = assertedDirection;
    return this;
  }

   /**
   * indicates whether this relationship is in the direction asserted by the terminology. This is meaninful because in some instances relationships are loaded in both directions
   * @return assertedDirection
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ASSERTED_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAssertedDirection() {
    return assertedDirection;
  }


  @JsonProperty(JSON_PROPERTY_ASSERTED_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssertedDirection(Boolean assertedDirection) {
    this.assertedDirection = assertedDirection;
  }


  public ConceptRelationship hierarchical(Boolean hierarchical) {
    this.hierarchical = hierarchical;
    return this;
  }

   /**
   * indicates whether this relationship is part of the hierarchy
   * @return hierarchical
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HIERARCHICAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHierarchical() {
    return hierarchical;
  }


  @JsonProperty(JSON_PROPERTY_HIERARCHICAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHierarchical(Boolean hierarchical) {
    this.hierarchical = hierarchical;
  }


  public ConceptRelationship additionalType(String additionalType) {
    this.additionalType = additionalType;
    return this;
  }

   /**
   * the more specific type of relationship (more information about this label is provided in the terminology metadata)
   * @return additionalType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalType() {
    return additionalType;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalType(String additionalType) {
    this.additionalType = additionalType;
  }


  public ConceptRelationship defining(Boolean defining) {
    this.defining = defining;
    return this;
  }

   /**
   * indicates whether this is a relationship is part of the concept logical definition
   * @return defining
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEFINING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDefining() {
    return defining;
  }


  @JsonProperty(JSON_PROPERTY_DEFINING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDefining(Boolean defining) {
    this.defining = defining;
  }


  public ConceptRelationship group(String group) {
    this.group = group;
    return this;
  }

   /**
   * used by terminologies that group relationships (e.g. SNOMEDCT) to indicate the group value
   * @return group
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroup() {
    return group;
  }


  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroup(String group) {
    this.group = group;
  }


  public ConceptRelationship toCode(String toCode) {
    this.toCode = toCode;
    return this;
  }

   /**
   * the code of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToCode() {
    return toCode;
  }


  @JsonProperty(JSON_PROPERTY_TO_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToCode(String toCode) {
    this.toCode = toCode;
  }


  public ConceptRelationship toName(String toName) {
    this.toName = toName;
    return this;
  }

   /**
   * the name of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToName() {
    return toName;
  }


  @JsonProperty(JSON_PROPERTY_TO_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToName(String toName) {
    this.toName = toName;
  }


  public ConceptRelationship toValue(String toValue) {
    this.toValue = toValue;
    return this;
  }

   /**
   * the literal value relationship is to (the right-hand side). If this is null, the relationship will have a &#39;to&#39;
   * @return toValue
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToValue() {
    return toValue;
  }


  @JsonProperty(JSON_PROPERTY_TO_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToValue(String toValue) {
    this.toValue = toValue;
  }


  public ConceptRelationship local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public ConceptRelationship modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public ConceptRelationship modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public ConceptRelationship created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public ConceptRelationship id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public ConceptRelationship active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public ConceptRelationship terminologyId(String terminologyId) {
    this.terminologyId = terminologyId;
    return this;
  }

   /**
   * the identifier asserted by the terminology
   * @return terminologyId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminologyId() {
    return terminologyId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminologyId(String terminologyId) {
    this.terminologyId = terminologyId;
  }


  public ConceptRelationship terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  /**
   * Return true if this ConceptRelationship object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptRelationship conceptRelationship = (ConceptRelationship) o;
    return Objects.equals(this.type, conceptRelationship.type) &&
        Objects.equals(this.toActive, conceptRelationship.toActive) &&
        Objects.equals(this.toTerminology, conceptRelationship.toTerminology) &&
        Objects.equals(this.assertedDirection, conceptRelationship.assertedDirection) &&
        Objects.equals(this.hierarchical, conceptRelationship.hierarchical) &&
        Objects.equals(this.additionalType, conceptRelationship.additionalType) &&
        Objects.equals(this.defining, conceptRelationship.defining) &&
        Objects.equals(this.group, conceptRelationship.group) &&
        Objects.equals(this.toCode, conceptRelationship.toCode) &&
        Objects.equals(this.toName, conceptRelationship.toName) &&
        Objects.equals(this.toValue, conceptRelationship.toValue) &&
        Objects.equals(this.local, conceptRelationship.local) &&
        Objects.equals(this.modified, conceptRelationship.modified) &&
        Objects.equals(this.modifiedBy, conceptRelationship.modifiedBy) &&
        Objects.equals(this.created, conceptRelationship.created) &&
        Objects.equals(this.id, conceptRelationship.id) &&
        Objects.equals(this.active, conceptRelationship.active) &&
        Objects.equals(this.terminologyId, conceptRelationship.terminologyId) &&
        Objects.equals(this.terminology, conceptRelationship.terminology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, toActive, toTerminology, assertedDirection, hierarchical, additionalType, defining, group, toCode, toName, toValue, local, modified, modifiedBy, created, id, active, terminologyId, terminology);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptRelationship {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    toActive: ").append(toIndentedString(toActive)).append("\n");
    sb.append("    toTerminology: ").append(toIndentedString(toTerminology)).append("\n");
    sb.append("    assertedDirection: ").append(toIndentedString(assertedDirection)).append("\n");
    sb.append("    hierarchical: ").append(toIndentedString(hierarchical)).append("\n");
    sb.append("    additionalType: ").append(toIndentedString(additionalType)).append("\n");
    sb.append("    defining: ").append(toIndentedString(defining)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    toCode: ").append(toIndentedString(toCode)).append("\n");
    sb.append("    toName: ").append(toIndentedString(toName)).append("\n");
    sb.append("    toValue: ").append(toIndentedString(toValue)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    terminologyId: ").append(toIndentedString(terminologyId)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

