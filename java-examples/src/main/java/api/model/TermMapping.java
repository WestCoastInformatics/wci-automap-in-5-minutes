/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a mapping for an input term to a coded terminology
 */
@JsonPropertyOrder({
  TermMapping.JSON_PROPERTY_VERSION,
  TermMapping.JSON_PROPERTY_ATTRIBUTES,
  TermMapping.JSON_PROPERTY_END_INDEX,
  TermMapping.JSON_PROPERTY_CODE,
  TermMapping.JSON_PROPERTY_CONTEXT,
  TermMapping.JSON_PROPERTY_TERM,
  TermMapping.JSON_PROPERTY_ENTITY_TYPE,
  TermMapping.JSON_PROPERTY_TERMINOLOGY,
  TermMapping.JSON_PROPERTY_START_INDEX,
  TermMapping.JSON_PROPERTY_NAME,
  TermMapping.JSON_PROPERTY_MODIFIED_BY,
  TermMapping.JSON_PROPERTY_CREATED,
  TermMapping.JSON_PROPERTY_MODIFIED,
  TermMapping.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class TermMapping {
  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public static final String JSON_PROPERTY_END_INDEX = "endIndex";
  private Integer endIndex;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_CONTEXT = "context";
  private Map<String, String> context = new HashMap<>();

  public static final String JSON_PROPERTY_TERM = "term";
  private String term;

  /**
   * Expected entity type to be mapped to.  Allowable values are detailed by the application metadata endpoint
   */
  public enum EntityTypeEnum {
    GENERAL("general"),
    
    ALLERGY("allergy"),
    
    BODYPART("bodyPart"),
    
    DEVICE("device"),
    
    CONDITION("condition"),
    
    FAMILYHISTORY("familyHistory"),
    
    IMMUNIZATION("immunization"),
    
    MEDICATION("medication"),
    
    LABRESULT("labResult"),
    
    LABRESULTUNIT("labResultUnit"),
    
    LABRESULTVALUE("labResultValue"),
    
    LABRESULTINTERPRETATION("labResultInterpretation"),
    
    PROCEDURE("procedure"),
    
    SOCIALHISTORY("socialHistory"),
    
    SUBSTANCE("substance"),
    
    VITALSIGN("vitalSign"),
    
    VITALSIGNUNIT("vitalSignUnit"),
    
    VITALSIGNVALUE("vitalSignValue"),
    
    VITALSIGNINTERPRETATION("vitalSignInterpretation"),
    
    BIOMARKER("biomarker"),
    
    COURSE("course"),
    
    GENDER("gender"),
    
    GRADE("grade"),
    
    HISTOLOGY("histology"),
    
    LINEOFTHERAPY("lineOfTherapy"),
    
    PERFORMANCESTATUS("performanceStatus"),
    
    SEVERITY("severity"),
    
    STAGE("stage"),
    
    TUMORSETTING("tumorSetting"),
    
    UNIT("unit"),
    
    CONDITIONCLINICALSTATUS("conditionClinicalStatus"),
    
    CONDITIONVERIFICATIONSTATUS("conditionVerificationStatus"),
    
    CONDITIONCATEGORY("conditionCategory"),
    
    MEDICATIONSTATUS("medicationStatus"),
    
    MEDICATIONDOSEFORM("medicationDoseForm"),
    
    PROCEDURESTATUS("procedureStatus"),
    
    PROCEDURECATEGORY("procedureCategory"),
    
    OBSERVATIONSTATUS("observationStatus"),
    
    OBSERVATIONCATEGORY("observationCategory"),
    
    ALLERGYCLINICALSTATUS("allergyClinicalStatus"),
    
    ALLERGYVERIFICATIONSTATUS("allergyVerificationStatus"),
    
    ALLERGYTYPE("allergyType"),
    
    ALLERGYCATEGORY("allergyCategory"),
    
    ALLERGYCRITICALITY("allergyCriticality"),
    
    ADVERSEEVENT("adverseEvent"),
    
    BIOMARKERINTERPRETATION("biomarkerInterpretation"),
    
    BIOMARKERMETHOD("biomarkerMethod"),
    
    BIOMARKERRESULT("biomarkerResult"),
    
    DOSEFORM("doseForm"),
    
    LABORDER("labOrder"),
    
    LABPANEL("labPanel"),
    
    SYMPTOM("symptom"),
    
    MULTI("multi"),
    
    OTHER("other");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public static final String JSON_PROPERTY_START_INDEX = "startIndex";
  private Integer startIndex;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public TermMapping() { 
  }

  public TermMapping version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public TermMapping attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public TermMapping putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Flags used to track things about mappings
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public TermMapping endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

   /**
   * End index of text this mapping is for
   * @return endIndex
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEndIndex() {
    return endIndex;
  }


  @JsonProperty(JSON_PROPERTY_END_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public TermMapping code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public TermMapping context(Map<String, String> context) {
    this.context = context;
    return this;
  }

  public TermMapping putContextItem(String key, String contextItem) {
    if (this.context == null) {
      this.context = new HashMap<>();
    }
    this.context.put(key, contextItem);
    return this;
  }

   /**
   * Additional textual context for disambiguation, including other text around the text of the term
   * @return context
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(Map<String, String> context) {
    this.context = context;
  }


  public TermMapping term(String term) {
    this.term = term;
    return this;
  }

   /**
   * The term represented from startIndex to endIndex
   * @return term
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerm() {
    return term;
  }


  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerm(String term) {
    this.term = term;
  }


  public TermMapping entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Expected entity type to be mapped to.  Allowable values are detailed by the application metadata endpoint
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public TermMapping terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * Get terminology
   * @return terminology
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public TermMapping startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

   /**
   * Start index of text this mapping is for
   * @return startIndex
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStartIndex() {
    return startIndex;
  }


  @JsonProperty(JSON_PROPERTY_START_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public TermMapping name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public TermMapping modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public TermMapping created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public TermMapping modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public TermMapping id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  /**
   * Return true if this TermMapping object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TermMapping termMapping = (TermMapping) o;
    return Objects.equals(this.version, termMapping.version) &&
        Objects.equals(this.attributes, termMapping.attributes) &&
        Objects.equals(this.endIndex, termMapping.endIndex) &&
        Objects.equals(this.code, termMapping.code) &&
        Objects.equals(this.context, termMapping.context) &&
        Objects.equals(this.term, termMapping.term) &&
        Objects.equals(this.entityType, termMapping.entityType) &&
        Objects.equals(this.terminology, termMapping.terminology) &&
        Objects.equals(this.startIndex, termMapping.startIndex) &&
        Objects.equals(this.name, termMapping.name) &&
        Objects.equals(this.modifiedBy, termMapping.modifiedBy) &&
        Objects.equals(this.created, termMapping.created) &&
        Objects.equals(this.modified, termMapping.modified) &&
        Objects.equals(this.id, termMapping.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, attributes, endIndex, code, context, term, entityType, terminology, startIndex, name, modifiedBy, created, modified, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TermMapping {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

