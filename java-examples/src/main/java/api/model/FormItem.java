/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.Answer;
import api.model.Unit;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * A form item representing a question or section in the vital signs form
 */
@JsonPropertyOrder({
  FormItem.JSON_PROPERTY_QUESTION_CODE,
  FormItem.JSON_PROPERTY_LOCAL_QUESTION_CODE,
  FormItem.JSON_PROPERTY_DATA_TYPE,
  FormItem.JSON_PROPERTY_HEADER,
  FormItem.JSON_PROPERTY_UNITS,
  FormItem.JSON_PROPERTY_CODING_INSTRUCTIONS,
  FormItem.JSON_PROPERTY_COPYRIGHT_NOTICE,
  FormItem.JSON_PROPERTY_QUESTION,
  FormItem.JSON_PROPERTY_ANSWERS,
  FormItem.JSON_PROPERTY_SKIP_LOGIC,
  FormItem.JSON_PROPERTY_RESTRICTIONS,
  FormItem.JSON_PROPERTY_DEFAULT_ANSWER,
  FormItem.JSON_PROPERTY_FORMATTING,
  FormItem.JSON_PROPERTY_CALCULATION_METHOD,
  FormItem.JSON_PROPERTY_ITEMS,
  FormItem.JSON_PROPERTY_LINK_ID,
  FormItem.JSON_PROPERTY_QUESTION_CODE_SYSTEM
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class FormItem {
  public static final String JSON_PROPERTY_QUESTION_CODE = "questionCode";
  private String questionCode;

  public static final String JSON_PROPERTY_LOCAL_QUESTION_CODE = "localQuestionCode";
  private String localQuestionCode;

  /**
   * Data type of the question (e.g., &#39;SECTION&#39;, &#39;REAL&#39;, &#39;CNE&#39;, &#39;ST&#39;)
   */
  public enum DataTypeEnum {
    SECTION("SECTION"),
    
    REAL("REAL"),
    
    CNE("CNE"),
    
    ST("ST");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  private DataTypeEnum dataType;

  public static final String JSON_PROPERTY_HEADER = "header";
  private Boolean header;

  public static final String JSON_PROPERTY_UNITS = "units";
  private List<Unit> units = new ArrayList<>();

  public static final String JSON_PROPERTY_CODING_INSTRUCTIONS = "codingInstructions";
  private String codingInstructions;

  public static final String JSON_PROPERTY_COPYRIGHT_NOTICE = "copyrightNotice";
  private String copyrightNotice;

  public static final String JSON_PROPERTY_QUESTION = "question";
  private String question;

  public static final String JSON_PROPERTY_ANSWERS = "answers";
  private List<Answer> answers = new ArrayList<>();

  public static final String JSON_PROPERTY_SKIP_LOGIC = "skipLogic";
  private Object skipLogic;

  public static final String JSON_PROPERTY_RESTRICTIONS = "restrictions";
  private Object restrictions;

  public static final String JSON_PROPERTY_DEFAULT_ANSWER = "defaultAnswer";
  private Object defaultAnswer;

  public static final String JSON_PROPERTY_FORMATTING = "formatting";
  private Object formatting;

  public static final String JSON_PROPERTY_CALCULATION_METHOD = "calculationMethod";
  private Object calculationMethod;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<FormItem> items = new ArrayList<>();

  public static final String JSON_PROPERTY_LINK_ID = "linkId";
  private String linkId;

  public static final String JSON_PROPERTY_QUESTION_CODE_SYSTEM = "questionCodeSystem";
  private String questionCodeSystem;

  public FormItem() { 
  }

  public FormItem questionCode(String questionCode) {
    this.questionCode = questionCode;
    return this;
  }

   /**
   * The question code identifier
   * @return questionCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUESTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuestionCode() {
    return questionCode;
  }


  @JsonProperty(JSON_PROPERTY_QUESTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuestionCode(String questionCode) {
    this.questionCode = questionCode;
  }


  public FormItem localQuestionCode(String localQuestionCode) {
    this.localQuestionCode = localQuestionCode;
    return this;
  }

   /**
   * Local question code if applicable
   * @return localQuestionCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_QUESTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalQuestionCode() {
    return localQuestionCode;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_QUESTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalQuestionCode(String localQuestionCode) {
    this.localQuestionCode = localQuestionCode;
  }


  public FormItem dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Data type of the question (e.g., &#39;SECTION&#39;, &#39;REAL&#39;, &#39;CNE&#39;, &#39;ST&#39;)
   * @return dataType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataTypeEnum getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public FormItem header(Boolean header) {
    this.header = header;
    return this;
  }

   /**
   * Indicates if this item is a header/section
   * @return header
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHeader() {
    return header;
  }


  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeader(Boolean header) {
    this.header = header;
  }


  public FormItem units(List<Unit> units) {
    this.units = units;
    return this;
  }

  public FormItem addUnitsItem(Unit unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

   /**
   * List of measurement units applicable to this item
   * @return units
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Unit> getUnits() {
    return units;
  }


  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnits(List<Unit> units) {
    this.units = units;
  }


  public FormItem codingInstructions(String codingInstructions) {
    this.codingInstructions = codingInstructions;
    return this;
  }

   /**
   * Instructions for coding this item
   * @return codingInstructions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODING_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCodingInstructions() {
    return codingInstructions;
  }


  @JsonProperty(JSON_PROPERTY_CODING_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodingInstructions(String codingInstructions) {
    this.codingInstructions = codingInstructions;
  }


  public FormItem copyrightNotice(String copyrightNotice) {
    this.copyrightNotice = copyrightNotice;
    return this;
  }

   /**
   * Copyright notice for this item
   * @return copyrightNotice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COPYRIGHT_NOTICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCopyrightNotice() {
    return copyrightNotice;
  }


  @JsonProperty(JSON_PROPERTY_COPYRIGHT_NOTICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCopyrightNotice(String copyrightNotice) {
    this.copyrightNotice = copyrightNotice;
  }


  public FormItem question(String question) {
    this.question = question;
    return this;
  }

   /**
   * The question text
   * @return question
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUESTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuestion() {
    return question;
  }


  @JsonProperty(JSON_PROPERTY_QUESTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuestion(String question) {
    this.question = question;
  }


  public FormItem answers(List<Answer> answers) {
    this.answers = answers;
    return this;
  }

  public FormItem addAnswersItem(Answer answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<>();
    }
    this.answers.add(answersItem);
    return this;
  }

   /**
   * List of possible answers for CNE type questions
   * @return answers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANSWERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Answer> getAnswers() {
    return answers;
  }


  @JsonProperty(JSON_PROPERTY_ANSWERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnswers(List<Answer> answers) {
    this.answers = answers;
  }


  public FormItem skipLogic(Object skipLogic) {
    this.skipLogic = skipLogic;
    return this;
  }

   /**
   * Skip logic for conditional questions
   * @return skipLogic
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP_LOGIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getSkipLogic() {
    return skipLogic;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_LOGIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipLogic(Object skipLogic) {
    this.skipLogic = skipLogic;
  }


  public FormItem restrictions(Object restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Restrictions on valid answers
   * @return restrictions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getRestrictions() {
    return restrictions;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestrictions(Object restrictions) {
    this.restrictions = restrictions;
  }


  public FormItem defaultAnswer(Object defaultAnswer) {
    this.defaultAnswer = defaultAnswer;
    return this;
  }

   /**
   * Default answer value
   * @return defaultAnswer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getDefaultAnswer() {
    return defaultAnswer;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultAnswer(Object defaultAnswer) {
    this.defaultAnswer = defaultAnswer;
  }


  public FormItem formatting(Object formatting) {
    this.formatting = formatting;
    return this;
  }

   /**
   * Formatting specifications
   * @return formatting
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMATTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getFormatting() {
    return formatting;
  }


  @JsonProperty(JSON_PROPERTY_FORMATTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormatting(Object formatting) {
    this.formatting = formatting;
  }


  public FormItem calculationMethod(Object calculationMethod) {
    this.calculationMethod = calculationMethod;
    return this;
  }

   /**
   * Method for calculating derived values
   * @return calculationMethod
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCalculationMethod() {
    return calculationMethod;
  }


  @JsonProperty(JSON_PROPERTY_CALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCalculationMethod(Object calculationMethod) {
    this.calculationMethod = calculationMethod;
  }


  public FormItem items(List<FormItem> items) {
    this.items = items;
    return this;
  }

  public FormItem addItemsItem(FormItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Nested form items for sections
   * @return items
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FormItem> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItems(List<FormItem> items) {
    this.items = items;
  }


  public FormItem linkId(String linkId) {
    this.linkId = linkId;
    return this;
  }

   /**
   * Hierarchical link identifier
   * @return linkId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkId() {
    return linkId;
  }


  @JsonProperty(JSON_PROPERTY_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkId(String linkId) {
    this.linkId = linkId;
  }


  public FormItem questionCodeSystem(String questionCodeSystem) {
    this.questionCodeSystem = questionCodeSystem;
    return this;
  }

   /**
   * Question code system (e.g., &#39;http://loinc.org&#39;)
   * @return questionCodeSystem
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUESTION_CODE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuestionCodeSystem() {
    return questionCodeSystem;
  }


  @JsonProperty(JSON_PROPERTY_QUESTION_CODE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuestionCodeSystem(String questionCodeSystem) {
    this.questionCodeSystem = questionCodeSystem;
  }


  /**
   * Return true if this FormItem object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormItem formItem = (FormItem) o;
    return Objects.equals(this.questionCode, formItem.questionCode) &&
        Objects.equals(this.localQuestionCode, formItem.localQuestionCode) &&
        Objects.equals(this.dataType, formItem.dataType) &&
        Objects.equals(this.header, formItem.header) &&
        Objects.equals(this.units, formItem.units) &&
        Objects.equals(this.codingInstructions, formItem.codingInstructions) &&
        Objects.equals(this.copyrightNotice, formItem.copyrightNotice) &&
        Objects.equals(this.question, formItem.question) &&
        Objects.equals(this.answers, formItem.answers) &&
        Objects.equals(this.skipLogic, formItem.skipLogic) &&
        Objects.equals(this.restrictions, formItem.restrictions) &&
        Objects.equals(this.defaultAnswer, formItem.defaultAnswer) &&
        Objects.equals(this.formatting, formItem.formatting) &&
        Objects.equals(this.calculationMethod, formItem.calculationMethod) &&
        Objects.equals(this.items, formItem.items) &&
        Objects.equals(this.linkId, formItem.linkId) &&
        Objects.equals(this.questionCodeSystem, formItem.questionCodeSystem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(questionCode, localQuestionCode, dataType, header, units, codingInstructions, copyrightNotice, question, answers, skipLogic, restrictions, defaultAnswer, formatting, calculationMethod, items, linkId, questionCodeSystem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormItem {\n");
    sb.append("    questionCode: ").append(toIndentedString(questionCode)).append("\n");
    sb.append("    localQuestionCode: ").append(toIndentedString(localQuestionCode)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    codingInstructions: ").append(toIndentedString(codingInstructions)).append("\n");
    sb.append("    copyrightNotice: ").append(toIndentedString(copyrightNotice)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    skipLogic: ").append(toIndentedString(skipLogic)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    defaultAnswer: ").append(toIndentedString(defaultAnswer)).append("\n");
    sb.append("    formatting: ").append(toIndentedString(formatting)).append("\n");
    sb.append("    calculationMethod: ").append(toIndentedString(calculationMethod)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    questionCodeSystem: ").append(toIndentedString(questionCodeSystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

