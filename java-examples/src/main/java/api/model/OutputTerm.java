/*
 * WCI Automap API
 * <p>API documentation for the West Coast Informatics Automated Term Mapping Service.</p><p>For developer documentation and examples, see on GitHub <a href=\"https://github.com/westCoastInformatics/wci-automap-in-5-minutes\">WCI Automap in 5 Minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.Tag;
import api.model.TermMapping;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents an fully mapped term with attached mappings
 */
@JsonPropertyOrder({
  OutputTerm.JSON_PROPERTY_MESSAGE,
  OutputTerm.JSON_PROPERTY_MAPPING_CT,
  OutputTerm.JSON_PROPERTY_MAPPINGS,
  OutputTerm.JSON_PROPERTY_CONFIDENCE,
  OutputTerm.JSON_PROPERTY_STATUS,
  OutputTerm.JSON_PROPERTY_CONTEXT,
  OutputTerm.JSON_PROPERTY_TO_TERMINOLOGY,
  OutputTerm.JSON_PROPERTY_ENTITY_TYPE,
  OutputTerm.JSON_PROPERTY_TERMINOLOGY,
  OutputTerm.JSON_PROPERTY_INPUT_TYPE,
  OutputTerm.JSON_PROPERTY_TASK_ID,
  OutputTerm.JSON_PROPERTY_TERM,
  OutputTerm.JSON_PROPERTY_CODE,
  OutputTerm.JSON_PROPERTY_MODIFIED,
  OutputTerm.JSON_PROPERTY_MODIFIED_BY,
  OutputTerm.JSON_PROPERTY_CREATED,
  OutputTerm.JSON_PROPERTY_ID,
  OutputTerm.JSON_PROPERTY_TAGS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T18:58:01.210254-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class OutputTerm {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_MAPPING_CT = "mappingCt";
  private Integer mappingCt;

  public static final String JSON_PROPERTY_MAPPINGS = "mappings";
  private List<TermMapping> mappings = new ArrayList<>();

  public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
  private Double confidence;

  /**
   * Status of the mapping of this term.  Allowable values are detailed by the application metadata endpoint
   */
  public enum StatusEnum {
    FINAL("final"),
    
    PROVISIONAL("provisional"),
    
    OUT_OF_SCOPE("out_of_scope"),
    
    CONFLICT("conflict"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CONTEXT = "context";
  private Map<String, String> context = new HashMap<>();

  public static final String JSON_PROPERTY_TO_TERMINOLOGY = "toTerminology";
  private String toTerminology;

  /**
   * Expected entity type to be mapped to.  Allowable values are detailed by the application metadata endpoint
   */
  public enum EntityTypeEnum {
    GENERAL("general"),
    
    ALLERGY("allergy"),
    
    BODYPART("bodyPart"),
    
    DEVICE("device"),
    
    CONDITION("condition"),
    
    FAMILYHISTORY("familyHistory"),
    
    IMMUNIZATION("immunization"),
    
    MEDICATION("medication"),
    
    LABRESULT("labResult"),
    
    LABRESULTUNIT("labResultUnit"),
    
    LABRESULTVALUE("labResultValue"),
    
    LABRESULTINTERPRETATION("labResultInterpretation"),
    
    PROCEDURE("procedure"),
    
    SOCIALHISTORY("socialHistory"),
    
    SUBSTANCE("substance"),
    
    VITALSIGN("vitalSign"),
    
    VITALSIGNUNIT("vitalSignUnit"),
    
    VITALSIGNVALUE("vitalSignValue"),
    
    VITALSIGNINTERPRETATION("vitalSignInterpretation"),
    
    BIOMARKER("biomarker"),
    
    COURSE("course"),
    
    GENDER("gender"),
    
    GRADE("grade"),
    
    HISTOLOGY("histology"),
    
    LINEOFTHERAPY("lineOfTherapy"),
    
    PERFORMANCESTATUS("performanceStatus"),
    
    SEVERITY("severity"),
    
    STAGE("stage"),
    
    TUMORSETTING("tumorSetting"),
    
    UNIT("unit"),
    
    CONDITIONCLINICALSTATUS("conditionClinicalStatus"),
    
    CONDITIONVERIFICATIONSTATUS("conditionVerificationStatus"),
    
    CONDITIONCATEGORY("conditionCategory"),
    
    MEDICATIONSTATUS("medicationStatus"),
    
    MEDICATIONDOSEFORM("medicationDoseForm"),
    
    PROCEDURESTATUS("procedureStatus"),
    
    PROCEDURECATEGORY("procedureCategory"),
    
    OBSERVATIONSTATUS("observationStatus"),
    
    OBSERVATIONCATEGORY("observationCategory"),
    
    ALLERGYCLINICALSTATUS("allergyClinicalStatus"),
    
    ALLERGYVERIFICATIONSTATUS("allergyVerificationStatus"),
    
    ALLERGYTYPE("allergyType"),
    
    ALLERGYCATEGORY("allergyCategory"),
    
    ALLERGYCRITICALITY("allergyCriticality"),
    
    ADVERSEEVENT("adverseEvent"),
    
    BIOMARKERINTERPRETATION("biomarkerInterpretation"),
    
    BIOMARKERMETHOD("biomarkerMethod"),
    
    BIOMARKERRESULT("biomarkerResult"),
    
    DOSEFORM("doseForm"),
    
    LABORDER("labOrder"),
    
    LABPANEL("labPanel"),
    
    SYMPTOM("symptom"),
    
    MULTI("multi"),
    
    OTHER("other");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  /**
   * Expected input type of the thing being mapped.  Allowable values are detailed by the application metadata endpoint
   */
  public enum InputTypeEnum {
    PICKLIST("picklist"),
    
    BOOLEAN("boolean"),
    
    STRING("string"),
    
    PHRASE("phrase"),
    
    FHIRCODING("fhirCoding");

    private String value;

    InputTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InputTypeEnum fromValue(String value) {
      for (InputTypeEnum b : InputTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INPUT_TYPE = "inputType";
  private InputTypeEnum inputType;

  public static final String JSON_PROPERTY_TASK_ID = "taskId";
  private String taskId;

  public static final String JSON_PROPERTY_TERM = "term";
  private String term;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private List<Tag> tags = new ArrayList<>();

  public OutputTerm() { 
  }

  public OutputTerm message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public OutputTerm mappingCt(Integer mappingCt) {
    this.mappingCt = mappingCt;
    return this;
  }

   /**
   * Number of computed mappings for the term
   * @return mappingCt
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAPPING_CT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMappingCt() {
    return mappingCt;
  }


  @JsonProperty(JSON_PROPERTY_MAPPING_CT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMappingCt(Integer mappingCt) {
    this.mappingCt = mappingCt;
  }


  public OutputTerm mappings(List<TermMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public OutputTerm addMappingsItem(TermMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * Computed mappings for this term
   * @return mappings
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TermMapping> getMappings() {
    return mappings;
  }


  @JsonProperty(JSON_PROPERTY_MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMappings(List<TermMapping> mappings) {
    this.mappings = mappings;
  }


  public OutputTerm confidence(Double confidence) {
    this.confidence = confidence;
    return this;
  }

   /**
   * Confidence of the term mapping, if applicable.  Allowable values are detailed by the application metadata endpoint
   * @return confidence
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidence() {
    return confidence;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidence(Double confidence) {
    this.confidence = confidence;
  }


  public OutputTerm status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the mapping of this term.  Allowable values are detailed by the application metadata endpoint
   * @return status
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public OutputTerm context(Map<String, String> context) {
    this.context = context;
    return this;
  }

  public OutputTerm putContextItem(String key, String contextItem) {
    if (this.context == null) {
      this.context = new HashMap<>();
    }
    this.context.put(key, contextItem);
    return this;
  }

   /**
   * Additional textual context for disambiguation, including other text around the text of the term
   * @return context
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(Map<String, String> context) {
    this.context = context;
  }


  public OutputTerm toTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
    return this;
  }

   /**
   * Terminology of the term to map to, e.g. \&quot;SNOMEDCT\&quot; or \&quot;https://loinc.org\&quot;. Leave blank for all available options specified by config.
   * @return toTerminology
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToTerminology() {
    return toTerminology;
  }


  @JsonProperty(JSON_PROPERTY_TO_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
  }


  public OutputTerm entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Expected entity type to be mapped to.  Allowable values are detailed by the application metadata endpoint
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public OutputTerm terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * Terminology for the term to be mapped, e.g. \&quot;SNOMEDCT\&quot; or \&quot;https://loinc.org\&quot;
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public OutputTerm inputType(InputTypeEnum inputType) {
    this.inputType = inputType;
    return this;
  }

   /**
   * Expected input type of the thing being mapped.  Allowable values are detailed by the application metadata endpoint
   * @return inputType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InputTypeEnum getInputType() {
    return inputType;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputType(InputTypeEnum inputType) {
    this.inputType = inputType;
  }


  public OutputTerm taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Task id for this term
   * @return taskId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaskId() {
    return taskId;
  }


  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public OutputTerm term(String term) {
    this.term = term;
    return this;
  }

   /**
   * Text value to be mapped, e.g. \&quot;heart disease\&quot;
   * @return term
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerm() {
    return term;
  }


  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerm(String term) {
    this.term = term;
  }


  public OutputTerm code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code for the term to be mapped, e.g. \&quot;56265001\&quot;
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public OutputTerm modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public OutputTerm modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public OutputTerm created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public OutputTerm id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public OutputTerm tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public OutputTerm addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * List of key/value tags
   * @return tags
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Tag> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  /**
   * Return true if this OutputTerm object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputTerm outputTerm = (OutputTerm) o;
    return Objects.equals(this.message, outputTerm.message) &&
        Objects.equals(this.mappingCt, outputTerm.mappingCt) &&
        Objects.equals(this.mappings, outputTerm.mappings) &&
        Objects.equals(this.confidence, outputTerm.confidence) &&
        Objects.equals(this.status, outputTerm.status) &&
        Objects.equals(this.context, outputTerm.context) &&
        Objects.equals(this.toTerminology, outputTerm.toTerminology) &&
        Objects.equals(this.entityType, outputTerm.entityType) &&
        Objects.equals(this.terminology, outputTerm.terminology) &&
        Objects.equals(this.inputType, outputTerm.inputType) &&
        Objects.equals(this.taskId, outputTerm.taskId) &&
        Objects.equals(this.term, outputTerm.term) &&
        Objects.equals(this.code, outputTerm.code) &&
        Objects.equals(this.modified, outputTerm.modified) &&
        Objects.equals(this.modifiedBy, outputTerm.modifiedBy) &&
        Objects.equals(this.created, outputTerm.created) &&
        Objects.equals(this.id, outputTerm.id) &&
        Objects.equals(this.tags, outputTerm.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, mappingCt, mappings, confidence, status, context, toTerminology, entityType, terminology, inputType, taskId, term, code, modified, modifiedBy, created, id, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputTerm {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    mappingCt: ").append(toIndentedString(mappingCt)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    toTerminology: ").append(toIndentedString(toTerminology)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    inputType: ").append(toIndentedString(inputType)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

