/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.OutputTerm;
import api.model.Tag;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a response from task processing request, including mapped terms
 */
@JsonPropertyOrder({
  OutputTask.JSON_PROPERTY_STATUS,
  OutputTask.JSON_PROPERTY_TERMS,
  OutputTask.JSON_PROPERTY_ASYNC_COMPLETE,
  OutputTask.JSON_PROPERTY_CONTEXT,
  OutputTask.JSON_PROPERTY_TOP_ANSWER,
  OutputTask.JSON_PROPERTY_MIN_CONFIDENCE,
  OutputTask.JSON_PROPERTY_AUDIT,
  OutputTask.JSON_PROPERTY_MODIFIED_BY,
  OutputTask.JSON_PROPERTY_CREATED,
  OutputTask.JSON_PROPERTY_MODIFIED,
  OutputTask.JSON_PROPERTY_ID,
  OutputTask.JSON_PROPERTY_TAGS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class OutputTask {
  /**
   * Overall status of the mapping of terms in this task.  Allowable values are detailed by the application metadata endpoint
   */
  public enum StatusEnum {
    FINAL("final"),
    
    PROVISIONAL("provisional"),
    
    OUT_OF_SCOPE("out_of_scope"),
    
    CONFLICT("conflict"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_TERMS = "terms";
  private List<OutputTerm> terms = new ArrayList<>();

  public static final String JSON_PROPERTY_ASYNC_COMPLETE = "asyncComplete";
  private Boolean asyncComplete;

  public static final String JSON_PROPERTY_CONTEXT = "context";
  private String context;

  public static final String JSON_PROPERTY_TOP_ANSWER = "topAnswer";
  private Boolean topAnswer = false;

  public static final String JSON_PROPERTY_MIN_CONFIDENCE = "minConfidence";
  private Double minConfidence = 0.0d;

  public static final String JSON_PROPERTY_AUDIT = "audit";
  private Boolean audit = true;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private List<Tag> tags = new ArrayList<>();

  public OutputTask() { 
  }

  public OutputTask status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Overall status of the mapping of terms in this task.  Allowable values are detailed by the application metadata endpoint
   * @return status
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public OutputTask terms(List<OutputTerm> terms) {
    this.terms = terms;
    return this;
  }

  public OutputTask addTermsItem(OutputTerm termsItem) {
    if (this.terms == null) {
      this.terms = new ArrayList<>();
    }
    this.terms.add(termsItem);
    return this;
  }

   /**
   * Collection of terms to be mapped
   * @return terms
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<OutputTerm> getTerms() {
    return terms;
  }


  @JsonProperty(JSON_PROPERTY_TERMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerms(List<OutputTerm> terms) {
    this.terms = terms;
  }


  public OutputTask asyncComplete(Boolean asyncComplete) {
    this.asyncComplete = asyncComplete;
    return this;
  }

   /**
   * Flag indicating that async operations on &#39;final&#39; status are complete
   * @return asyncComplete
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAsyncComplete() {
    return asyncComplete;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsyncComplete(Boolean asyncComplete) {
    this.asyncComplete = asyncComplete;
  }


  public OutputTask context(String context) {
    this.context = context;
    return this;
  }

   /**
   * Additional textual context for disambiguation, including other text around the text of the terms passed in
   * @return context
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(String context) {
    this.context = context;
  }


  public OutputTask topAnswer(Boolean topAnswer) {
    this.topAnswer = topAnswer;
    return this;
  }

   /**
   * Indicator of whether to return the top mapped answer regardless of whether the minimum confidence threshold has been met
   * @return topAnswer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOP_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTopAnswer() {
    return topAnswer;
  }


  @JsonProperty(JSON_PROPERTY_TOP_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopAnswer(Boolean topAnswer) {
    this.topAnswer = topAnswer;
  }


  public OutputTask minConfidence(Double minConfidence) {
    this.minConfidence = minConfidence;
    return this;
  }

   /**
   * Minimum confidence threshold for mapped results
   * @return minConfidence
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMinConfidence() {
    return minConfidence;
  }


  @JsonProperty(JSON_PROPERTY_MIN_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinConfidence(Double minConfidence) {
    this.minConfidence = minConfidence;
  }


  public OutputTask audit(Boolean audit) {
    this.audit = audit;
    return this;
  }

   /**
   * Indicator of whether to use auditing (automatically false if configuration does not persist outputs)
   * @return audit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAudit() {
    return audit;
  }


  @JsonProperty(JSON_PROPERTY_AUDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAudit(Boolean audit) {
    this.audit = audit;
  }


  public OutputTask modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public OutputTask created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public OutputTask modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public OutputTask id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public OutputTask tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public OutputTask addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * List of key/value tags
   * @return tags
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Tag> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  /**
   * Return true if this OutputTask object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputTask outputTask = (OutputTask) o;
    return Objects.equals(this.status, outputTask.status) &&
        Objects.equals(this.terms, outputTask.terms) &&
        Objects.equals(this.asyncComplete, outputTask.asyncComplete) &&
        Objects.equals(this.context, outputTask.context) &&
        Objects.equals(this.topAnswer, outputTask.topAnswer) &&
        Objects.equals(this.minConfidence, outputTask.minConfidence) &&
        Objects.equals(this.audit, outputTask.audit) &&
        Objects.equals(this.modifiedBy, outputTask.modifiedBy) &&
        Objects.equals(this.created, outputTask.created) &&
        Objects.equals(this.modified, outputTask.modified) &&
        Objects.equals(this.id, outputTask.id) &&
        Objects.equals(this.tags, outputTask.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, terms, asyncComplete, context, topAnswer, minConfidence, audit, modifiedBy, created, modified, id, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputTask {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    asyncComplete: ").append(toIndentedString(asyncComplete)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    topAnswer: ").append(toIndentedString(topAnswer)).append("\n");
    sb.append("    minConfidence: ").append(toIndentedString(minConfidence)).append("\n");
    sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

