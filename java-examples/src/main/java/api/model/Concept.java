/*
 * WCI Automap API
 * <p>API documentation for the West Coast Informatics Automated Term Mapping Service.</p><p>For developer documentation and examples, see on GitHub <a href=\"https://github.com/westCoastInformatics/wci-automap-in-5-minutes\">WCI Automap in 5 Minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.Atom;
import api.model.Axiom;
import api.model.Definition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a concept with a code in a terminology
 */
@JsonPropertyOrder({
  Concept.JSON_PROPERTY_SUFFICIENTLY_DEFINED,
  Concept.JSON_PROPERTY_DEFINITIONS,
  Concept.JSON_PROPERTY_SEMANTIC_TYPES,
  Concept.JSON_PROPERTY_ATOMS,
  Concept.JSON_PROPERTY_CODE,
  Concept.JSON_PROPERTY_AXIOMS,
  Concept.JSON_PROPERTY_LOCAL,
  Concept.JSON_PROPERTY_MODIFIED,
  Concept.JSON_PROPERTY_MODIFIED_BY,
  Concept.JSON_PROPERTY_CREATED,
  Concept.JSON_PROPERTY_ID,
  Concept.JSON_PROPERTY_ACTIVE,
  Concept.JSON_PROPERTY_TERMINOLOGY,
  Concept.JSON_PROPERTY_NAME,
  Concept.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T18:58:01.210254-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Concept {
  public static final String JSON_PROPERTY_SUFFICIENTLY_DEFINED = "sufficientlyDefined";
  private Boolean sufficientlyDefined;

  public static final String JSON_PROPERTY_DEFINITIONS = "definitions";
  private List<Definition> definitions = new ArrayList<>();

  public static final String JSON_PROPERTY_SEMANTIC_TYPES = "semanticTypes";
  private Set<String> semanticTypes = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_ATOMS = "atoms";
  private List<Atom> atoms = new ArrayList<>();

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_AXIOMS = "axioms";
  private List<Axiom> axioms = new ArrayList<>();

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public Concept() { 
  }

  public Concept sufficientlyDefined(Boolean sufficientlyDefined) {
    this.sufficientlyDefined = sufficientlyDefined;
    return this;
  }

   /**
   * indicates whether the concept is specified with logical necessary and sufficient conditions.  Generally not important except for description-logic based terminologies where this is important.
   * @return sufficientlyDefined
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUFFICIENTLY_DEFINED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSufficientlyDefined() {
    return sufficientlyDefined;
  }


  @JsonProperty(JSON_PROPERTY_SUFFICIENTLY_DEFINED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSufficientlyDefined(Boolean sufficientlyDefined) {
    this.sufficientlyDefined = sufficientlyDefined;
  }


  public Concept definitions(List<Definition> definitions) {
    this.definitions = definitions;
    return this;
  }

  public Concept addDefinitionsItem(Definition definitionsItem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<>();
    }
    this.definitions.add(definitionsItem);
    return this;
  }

   /**
   * the definitions associated with this concept
   * @return definitions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Definition> getDefinitions() {
    return definitions;
  }


  @JsonProperty(JSON_PROPERTY_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefinitions(List<Definition> definitions) {
    this.definitions = definitions;
  }


  public Concept semanticTypes(Set<String> semanticTypes) {
    this.semanticTypes = semanticTypes;
    return this;
  }

  public Concept addSemanticTypesItem(String semanticTypesItem) {
    if (this.semanticTypes == null) {
      this.semanticTypes = new LinkedHashSet<>();
    }
    this.semanticTypes.add(semanticTypesItem);
    return this;
  }

   /**
   * high-level semantic categories associated with this concept - values depend on the terminologies loaded
   * @return semanticTypes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEMANTIC_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getSemanticTypes() {
    return semanticTypes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SEMANTIC_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSemanticTypes(Set<String> semanticTypes) {
    this.semanticTypes = semanticTypes;
  }


  public Concept atoms(List<Atom> atoms) {
    this.atoms = atoms;
    return this;
  }

  public Concept addAtomsItem(Atom atomsItem) {
    if (this.atoms == null) {
      this.atoms = new ArrayList<>();
    }
    this.atoms.add(atomsItem);
    return this;
  }

   /**
   * the names associated with this concept
   * @return atoms
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATOMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Atom> getAtoms() {
    return atoms;
  }


  @JsonProperty(JSON_PROPERTY_ATOMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAtoms(List<Atom> atoms) {
    this.atoms = atoms;
  }


  public Concept code(String code) {
    this.code = code;
    return this;
  }

   /**
   * the code in the specified terminology
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public Concept axioms(List<Axiom> axioms) {
    this.axioms = axioms;
    return this;
  }

  public Concept addAxiomsItem(Axiom axiomsItem) {
    if (this.axioms == null) {
      this.axioms = new ArrayList<>();
    }
    this.axioms.add(axiomsItem);
    return this;
  }

   /**
   * the axioms associated with this concept
   * @return axioms
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AXIOMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Axiom> getAxioms() {
    return axioms;
  }


  @JsonProperty(JSON_PROPERTY_AXIOMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxioms(List<Axiom> axioms) {
    this.axioms = axioms;
  }


  public Concept local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Concept modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public Concept modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Concept created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public Concept id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Concept active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Concept terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public Concept name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Concept attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Concept putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this Concept object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Concept concept = (Concept) o;
    return Objects.equals(this.sufficientlyDefined, concept.sufficientlyDefined) &&
        Objects.equals(this.definitions, concept.definitions) &&
        Objects.equals(this.semanticTypes, concept.semanticTypes) &&
        Objects.equals(this.atoms, concept.atoms) &&
        Objects.equals(this.code, concept.code) &&
        Objects.equals(this.axioms, concept.axioms) &&
        Objects.equals(this.local, concept.local) &&
        Objects.equals(this.modified, concept.modified) &&
        Objects.equals(this.modifiedBy, concept.modifiedBy) &&
        Objects.equals(this.created, concept.created) &&
        Objects.equals(this.id, concept.id) &&
        Objects.equals(this.active, concept.active) &&
        Objects.equals(this.terminology, concept.terminology) &&
        Objects.equals(this.name, concept.name) &&
        Objects.equals(this.attributes, concept.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sufficientlyDefined, definitions, semanticTypes, atoms, code, axioms, local, modified, modifiedBy, created, id, active, terminology, name, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Concept {\n");
    sb.append("    sufficientlyDefined: ").append(toIndentedString(sufficientlyDefined)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    semanticTypes: ").append(toIndentedString(semanticTypes)).append("\n");
    sb.append("    atoms: ").append(toIndentedString(atoms)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    axioms: ").append(toIndentedString(axioms)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

