/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a terminology abbreviation and associated metadata
 */
@JsonPropertyOrder({
  Terminology.JSON_PROPERTY_VERSION,
  Terminology.JSON_PROPERTY_SYSTEM_URI,
  Terminology.JSON_PROPERTY_ABBREVIATION,
  Terminology.JSON_PROPERTY_SYSTEM_OID,
  Terminology.JSON_PROPERTY_EXPRESSION_ENABLED,
  Terminology.JSON_PROPERTY_NAME,
  Terminology.JSON_PROPERTY_LOCAL,
  Terminology.JSON_PROPERTY_MODIFIED_BY,
  Terminology.JSON_PROPERTY_CREATED,
  Terminology.JSON_PROPERTY_MODIFIED,
  Terminology.JSON_PROPERTY_ID,
  Terminology.JSON_PROPERTY_ACTIVE,
  Terminology.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Terminology {
  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_SYSTEM_URI = "systemUri";
  private String systemUri;

  public static final String JSON_PROPERTY_ABBREVIATION = "abbreviation";
  private String abbreviation;

  public static final String JSON_PROPERTY_SYSTEM_OID = "systemOid";
  private String systemOid;

  public static final String JSON_PROPERTY_EXPRESSION_ENABLED = "expressionEnabled";
  private Boolean expressionEnabled;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Date created;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private Date modified;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public Terminology() { 
  }

  public Terminology version(String version) {
    this.version = version;
    return this;
  }

   /**
   * the terminology version
   * @return version
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
  }


  public Terminology systemUri(String systemUri) {
    this.systemUri = systemUri;
    return this;
  }

   /**
   * the FHIR system URI for the terminology
   * @return systemUri
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYSTEM_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSystemUri() {
    return systemUri;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemUri(String systemUri) {
    this.systemUri = systemUri;
  }


  public Terminology abbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return abbreviation
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ABBREVIATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAbbreviation() {
    return abbreviation;
  }


  @JsonProperty(JSON_PROPERTY_ABBREVIATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }


  public Terminology systemOid(String systemOid) {
    this.systemOid = systemOid;
    return this;
  }

   /**
   * the OID for the terminology
   * @return systemOid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYSTEM_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSystemOid() {
    return systemOid;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemOid(String systemOid) {
    this.systemOid = systemOid;
  }


  public Terminology expressionEnabled(Boolean expressionEnabled) {
    this.expressionEnabled = expressionEnabled;
    return this;
  }

   /**
   * indicates whether ECL-style expressions can be used when searching the terminology
   * @return expressionEnabled
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPRESSION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getExpressionEnabled() {
    return expressionEnabled;
  }


  @JsonProperty(JSON_PROPERTY_EXPRESSION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpressionEnabled(Boolean expressionEnabled) {
    this.expressionEnabled = expressionEnabled;
  }


  public Terminology name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Terminology local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Terminology modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Terminology created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(Date created) {
    this.created = created;
  }


  public Terminology modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModified(Date modified) {
    this.modified = modified;
  }


  public Terminology id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Terminology active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Terminology attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Terminology putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this Terminology object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Terminology terminology = (Terminology) o;
    return Objects.equals(this.version, terminology.version) &&
        Objects.equals(this.systemUri, terminology.systemUri) &&
        Objects.equals(this.abbreviation, terminology.abbreviation) &&
        Objects.equals(this.systemOid, terminology.systemOid) &&
        Objects.equals(this.expressionEnabled, terminology.expressionEnabled) &&
        Objects.equals(this.name, terminology.name) &&
        Objects.equals(this.local, terminology.local) &&
        Objects.equals(this.modifiedBy, terminology.modifiedBy) &&
        Objects.equals(this.created, terminology.created) &&
        Objects.equals(this.modified, terminology.modified) &&
        Objects.equals(this.id, terminology.id) &&
        Objects.equals(this.active, terminology.active) &&
        Objects.equals(this.attributes, terminology.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, systemUri, abbreviation, systemOid, expressionEnabled, name, local, modifiedBy, created, modified, id, active, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Terminology {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    systemUri: ").append(toIndentedString(systemUri)).append("\n");
    sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
    sb.append("    systemOid: ").append(toIndentedString(systemOid)).append("\n");
    sb.append("    expressionEnabled: ").append(toIndentedString(expressionEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

