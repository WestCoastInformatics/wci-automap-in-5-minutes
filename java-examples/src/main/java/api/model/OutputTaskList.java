/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.OutputTask;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a list of output tasks
 */
@JsonPropertyOrder({
  OutputTaskList.JSON_PROPERTY_TOTAL,
  OutputTaskList.JSON_PROPERTY_LIMIT,
  OutputTaskList.JSON_PROPERTY_OFFSET,
  OutputTaskList.JSON_PROPERTY_FILTERED,
  OutputTaskList.JSON_PROPERTY_ITEMS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T16:47:36.399771100-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class OutputTaskList {
  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Integer limit;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Integer offset;

  public static final String JSON_PROPERTY_FILTERED = "filtered";
  private Integer filtered;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private OutputTask items;

  public OutputTaskList() { 
  }

  public OutputTaskList total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * the total number of potential results
   * @return total
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Integer total) {
    this.total = total;
  }


  public OutputTaskList limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * the max number results requested
   * @return limit
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public OutputTaskList offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * the starting index requested
   * @return offset
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public OutputTaskList filtered(Integer filtered) {
    this.filtered = filtered;
    return this;
  }

   /**
   * the max number results requested
   * @return filtered
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILTERED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFiltered() {
    return filtered;
  }


  @JsonProperty(JSON_PROPERTY_FILTERED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFiltered(Integer filtered) {
    this.filtered = filtered;
  }


  public OutputTaskList items(OutputTask items) {
    this.items = items;
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OutputTask getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItems(OutputTask items) {
    this.items = items;
  }


  /**
   * Return true if this OutputTaskList object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputTaskList outputTaskList = (OutputTaskList) o;
    return Objects.equals(this.total, outputTaskList.total) &&
        Objects.equals(this.limit, outputTaskList.limit) &&
        Objects.equals(this.offset, outputTaskList.offset) &&
        Objects.equals(this.filtered, outputTaskList.filtered) &&
        Objects.equals(this.items, outputTaskList.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, limit, offset, filtered, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputTaskList {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    filtered: ").append(toIndentedString(filtered)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

