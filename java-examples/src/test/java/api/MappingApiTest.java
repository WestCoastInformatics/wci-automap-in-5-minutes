/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.ApiException;
import api.model.AuditEntry;
import api.model.AuthRequest;
import api.model.AuthRequest.GrantTypeEnum;
import api.model.AuthResponse;
import api.model.InputTask;
import api.model.InputTerm;
import api.model.InputTerm.EntityTypeEnum;
import api.model.InputTerm.InputTypeEnum;
import api.model.OutputTask;
import api.model.OutputTerm;
import api.model.ResultListOutputTask;
import api.model.ResultListOutputTerm;
import api.model.Tag;
import api.model.TermMapping;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.FileInputStream;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for MappingApi
 */
public class MappingApiTest {

    private final MappingApi api = new MappingApi();

    @BeforeEach
    public void setUp() {

        // Set up the API client with authentication
        final String username = System.getProperty("username");
        final String password = System.getProperty("password");
        String accessToken = null;
        final AuthRequest authRequest = new AuthRequest();
        authRequest.setGrantType(GrantTypeEnum.USERNAME_PASSWORD);
        authRequest.setUsername(username);
        authRequest.setPassword(password);

        try {
            final LoginApi loginApi = new LoginApi();
            final AuthResponse response = loginApi.auth(authRequest);
            accessToken = response.getAccessToken();
            api.getApiClient().setBearerToken(accessToken);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail("Failed to authenticate: " + e.getMessage());
        }
        api.getApiClient().setBearerToken(accessToken);

    }

    /**
     * Add an task to request mapping of included terms
     * <p>
     * &lt;a href&#x3D;\&quot;/examples/index.html\&quot;&gt;Click here&lt;/a&gt; for samples of request and response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskTest() throws ApiException {

        final InputTerm inputTerm = new InputTerm();
        final EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        inputTerm.setEntityType(entityType);
        inputTerm.setTerminology("http://snomed.info/sct");
        inputTerm.setCode("22298006");
        inputTerm.setInputType(InputTypeEnum.STRING);

        final InputTask inputTask = new InputTask();
        inputTask.addTermsItem(inputTerm);

        final OutputTask response = api.addTask(inputTask);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getTerms());
        for (final OutputTerm term : response.getTerms()) {
            assertNotNull(term.getId());
            // assertNotNull(term.getType());
            // assertNotNull(term.getSource());
            // assertNotNull(term.getTermSourceCode());
            assertEquals(entityType.toString(), term.getEntityType().toString());
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertEquals(entityType.toString(), mapping.getEntityType().toString());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
            }
        }
    }

    /**
     * Add an task to request mapping of included terms
     * <p>
     * &lt;a href&#x3D;\&quot;/examples/index.html\&quot;&gt;Click here&lt;/a&gt; for samples of request and response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskTestWithInactiveCode() throws ApiException {

        final InputTerm inputTerm = new InputTerm();
        final EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        inputTerm.setEntityType(entityType);
        inputTerm.setTerminology("http://snomed.info/sct");
        inputTerm.setCode("194801005");
        inputTerm.setInputType(InputTypeEnum.STRING);

        final InputTask inputTask = new InputTask();
        inputTask.addTermsItem(inputTerm);

        final OutputTask response = api.addTask(inputTask);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getTerms());
        for (final OutputTerm term : response.getTerms()) {
            assertNotNull(term.getId());
            // assertNotNull(term.getTermType());
            // assertNotNull(term.getTermSource());
            // assertNotNull(term.getTermSourceCode());
            assertEquals(entityType.toString(), term.getEntityType().toString());
            // one of the mappings should be a no target
            boolean foundNoTarget = false;
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                // TODO: where is assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertEquals(entityType.toString(), mapping.getEntityType().toString());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
                if ("no target".equalsIgnoreCase(mapping.getName())) {
                    foundNoTarget = true;
                }
            }
            assertTrue(foundNoTarget);
        }
    }

    /**
     * Add an task to request mapping of included terms
     * <p>
     * &lt;a href&#x3D;\&quot;/examples/index.html\&quot;&gt;Click here&lt;/a&gt; for samples of request and response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskTestWithInvalidCode() throws ApiException {


        final InputTerm inputTerm = new InputTerm();
        final EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        inputTerm.setEntityType(entityType);
        inputTerm.setTerminology("http://snomed.info/sct");
        inputTerm.setCode("abcdef");
        inputTerm.setInputType(InputTypeEnum.STRING);

        final InputTask inputTask = new InputTask();
        inputTask.addTermsItem(inputTerm);

        final OutputTask response = api.addTask(inputTask);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getTerms());
        for (final OutputTerm term : response.getTerms()) {
            assertNotNull(term.getId());
            // assertNotNull(term.getTermType());
            // assertNotNull(term.getTermSource());
            // assertNotNull(term.getTermSourceCode());
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                // TODO: where is assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertEquals(entityType.toString(), mapping.getEntityType().toString());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
            }
        }
    }

    @Test
    public void addTaskTestWithTerm() throws ApiException {
        // Perform mapping on a text string for a condition entity type.
        EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        InputTask inputTask = createInputTask("heart attack", entityType);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
        }
    }

    @Test
    public void addTaskTestForBodyPart() throws ApiException {
        // Perform mapping on a text string for a body part entity type.

        EntityTypeEnum entityType = EntityTypeEnum.BODYPART;
        InputTask inputTask = createInputTask("left ear", entityType);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
        }
    }

    @Test
    public void addTaskTestForLabResult() throws ApiException {
        // Perform mapping on a text string for a lab result entity type.
        EntityTypeEnum entityType = EntityTypeEnum.LABRESULT;
        InputTask inputTask = createInputTask("sodium", entityType);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
        }
    }

    @Test
    public void addTaskTestForMedication() throws ApiException {
        // Perform mapping on a text string for a medication entity type.
        EntityTypeEnum entityType = EntityTypeEnum.MEDICATION;
        InputTask inputTask = createInputTask("aspirin 81mg po", entityType);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
        }
    }

    @Test
    public void addTaskTestForProcedure() throws ApiException {
        // Perform mapping on a text string for a procedure entity type.
        EntityTypeEnum entityType = EntityTypeEnum.PROCEDURE;
        InputTask inputTask = createInputTask("chest mri", entityType);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
        }
    }

    @Test
    public void addTaskTestForComplexText() throws ApiException {
        // Perform mapping on a text string with multiple values for the condition entity type.
        EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        InputTask inputTask = createInputTask("fever, cough, and headache", entityType);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
        }
    }

    @Test
    public void addTaskTestWithNoEntityType() throws ApiException {
        // Perform mapping on a text string without specifying an entity type.
        // This should default to CONDITION.
        InputTask inputTask = createInputTask("chest mri", EntityTypeEnum.PROCEDURE);
        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, EntityTypeEnum.PROCEDURE);
        }
    }

    @Test
    public void addTaskTestWithTags() throws ApiException {
        // Perform mapping on a text string with tags.
        EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        InputTask inputTask = createInputTask("heart attack", entityType);
        for(InputTerm term : inputTask.getTerms()) {
            term.addTagsItem(new Tag().key("termTagKey1").value("termTagValue1"));
            term.addTagsItem(new Tag().key("termTagKey2").value("termTagValue2"));
        }
        inputTask.addTagsItem(new Tag().key("termTagKey1").value("termTagValue1"));
        inputTask.addTagsItem(new Tag().key("termTagKey2").value("termTagValue2"));

        OutputTask task = api.addTask(inputTask);
        assertNotNull(task);
        assertNotNull(task.getId());
        assertNotNull(task.getTerms());
        for (OutputTerm term : task.getTerms()) {
            assertTerm(term, entityType);
            assertEquals(2, term.getTags().stream().filter(tag -> "termTagKey1".equalsIgnoreCase(tag.getKey()) || "termTagKey2".equalsIgnoreCase(tag.getKey())).count());
        }
        assertEquals(2, task.getTags().stream().filter(tag -> "termTagKey1".equalsIgnoreCase(tag.getKey()) || "termTagKey2".equalsIgnoreCase(tag.getKey())).count());
    }



    private InputTask createInputTask(String term, EntityTypeEnum entityType) {
        InputTask inputTask = new InputTask();
        InputTerm inputTerm = new InputTerm();
        inputTerm.setTerm(term);
        inputTerm.setEntityType(entityType);
        inputTerm.setInputType(InputTypeEnum.STRING);
        inputTask.setMinConfidence(0.7);
        inputTask.addTermsItem(inputTerm);
        return inputTask;
    }

    private void assertTerm(OutputTerm term, EntityTypeEnum entityType) {
        assertNotNull(term.getId());
        assertNotNull(term.getTerm());
        if(entityType != null && term.getEntityType() != null) {
            assertEquals(entityType.toString(), term.getEntityType().toString());
        }
        for (TermMapping mapping : term.getMappings()) {
            assertNotNull(mapping.getId());
            assertTrue(mapping.getConfidence() >= 0.7);
        }
    }

    /**
     * Find tasks matching specified parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTasksTest() throws ApiException {

        final String query = "terms.term:heart";
        final Integer offset = 0;
        final Integer limit = 10;
        final String sort = null;
        final Boolean ascending = true;
        final ResultListOutputTask response = api.findTasks(query, offset, limit, sort, ascending);
        assertNotNull(response);
        assertNotNull(response.getTotal());
        assertNotNull(response.getLimit());
        assertNotNull(response.getOffset());
        assertNotNull(response.getItems());

        final List<OutputTask> tasks = response.getItems();
        for (final OutputTask task : tasks) {
            assertNotNull(task.getId());
            // assertNotNull(task.getConfidence());
            assertNotNull(task.getModified());
            assertNotNull(task.getCreated());
            assertNotNull(task.getModifiedBy());
            assertNotNull(task.getTags());
            for (final Tag tag : task.getTags()) {
                assertNotNull(tag.getKey());
                assertNotNull(tag.getValue());
            }
            for (final OutputTerm term : task.getTerms()) {
                assertNotNull(term.getId());
                assertNotNull(term.getTerm());
                // assertNotNull(term.getTermType());
                // assertNotNull(term.getTermSource());
                // assertNotNull(term.getTermSourceCode());
                for (final TermMapping mapping : term.getMappings()) {
                    assertNotNull(mapping.getId());
                    // assertNotNull(mapping.getConfidence());
                    assertNotNull(mapping.getTerminology());
                    if("no target".equalsIgnoreCase(mapping.getName())) {
                        assertNull(mapping.getCode());
                    } else {
                        assertNotNull(mapping.getCode());
                    }
                    assertNotNull(mapping.getName());
                    assertNotNull(mapping.getEntityType());
                    assertNotNull(mapping.getStartIndex());
                    assertNotNull(mapping.getEndIndex());
                }
            }
        }
    }

    /**
     * Find tasks matching specified parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTermsTest() throws ApiException {
        final String query = "term:heart";
        final Integer offset = null;
        final Integer limit = null;
        final String sort = null;
        final Boolean ascending = true;
        final ResultListOutputTerm response = api.findTerms(query, offset, limit, sort, ascending);

        assertNotNull(response);
        assertNotNull(response.getTotal());
        assertNotNull(response.getLimit());
        assertNotNull(response.getOffset());
        assertNotNull(response.getItems());

        final List<OutputTerm> terms = response.getItems();
        for (final OutputTerm term : terms) {
            assertNotNull(term.getId());
            assertNotNull(term.getTerm());
            // assertNotNull(term.getTermType());
            // assertNotNull(term.getTermSource());
            // assertNotNull(term.getTermSourceCode());
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                if ("no target".equalsIgnoreCase(mapping.getName())) {
                    assertNull(mapping.getCode());
                } else {
                    assertNotNull(mapping.getCode());
                }
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
            }
        }
    }


    /**
     * Get term for the specified taskId and termId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTermTest() throws ApiException {
        InputTask task = createInputTask("heart attack", EntityTypeEnum.CONDITION);
        OutputTask response = api.addTask(task);
        OutputTerm taskTerm = api.getTaskTerm(response.getId().toString(), response.getTerms().get(0).getId().toString());
        assertNotNull(taskTerm);
        assertEquals("heart attack", taskTerm.getTerm());
        assertFalse(taskTerm.getMappings().isEmpty());
        assertNotNull(taskTerm.getEntityType());
        assertEquals(EntityTypeEnum.CONDITION.toString(), taskTerm.getEntityType().toString());
    }

    /**
     * Get audit trail for the specified taskId and termId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTermAuditTrailTest() throws ApiException {
        InputTask task = createInputTask("heart attack", EntityTypeEnum.CONDITION);
        OutputTask response = api.addTask(task);
        List<AuditEntry> auditEntries = api.getTaskTermAuditTrail(response.getId().toString(), response.getTerms().get(0).getId().toString());
        assertFalse(auditEntries.isEmpty());
        task.setAudit(false); // Disable audit for the task
        OutputTask updatedTask = api.addTask(task);
        // Verify that the audit entries are empty for the updated task
        List<AuditEntry> updatedAuditEntries = api.getTaskTermAuditTrail(updatedTask.getId().toString(), updatedTask.getTerms().get(0).getId().toString());
        assertTrue(updatedAuditEntries.isEmpty());
    }
}
