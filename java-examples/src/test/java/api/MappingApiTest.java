/*
 * WCI Automap API
 * API documentation for the West Coast Informatics Automated Term Mapping Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.ApiException;
import api.model.AuthRequest;
import api.model.AuthRequest.GrantTypeEnum;
import api.model.AuthResponse;
import api.model.InputTask;
import api.model.InputTerm;
import api.model.InputTerm.EntityTypeEnum;
import api.model.InputTerm.InputTypeEnum;
import api.model.OutputTask;
import api.model.OutputTaskList;
import api.model.OutputTerm;
import api.model.OutputTermList;
import api.model.ResultListOutputTask;
import api.model.ResultListOutputTerm;
import api.model.Tag;
import api.model.TermMapping;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.FileInputStream;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for MappingApi
 */
public class MappingApiTest {

    private final MappingApi api = new MappingApi();

    @BeforeEach
    public void setUp() {

        // Set up the API client with authentication
        final String username = System.getProperty("username");
        final String password = System.getProperty("password");
        String accessToken = null;
        final AuthRequest authRequest = new AuthRequest();
        authRequest.setGrantType(GrantTypeEnum.USERNAME_PASSWORD);
        authRequest.setUsername(username);
        authRequest.setPassword(password);

        try {
            final LoginApi loginApi = new LoginApi();
            final AuthResponse response = loginApi.auth(authRequest);
            accessToken = response.getAccessToken();
            api.getApiClient().setBearerToken(accessToken);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail("Failed to authenticate: " + e.getMessage());
        }
        api.getApiClient().setBearerToken(accessToken);

    }

    /**
     * Add an task to request mapping of included terms
     * <p>
     * &lt;a href&#x3D;\&quot;/examples/index.html\&quot;&gt;Click here&lt;/a&gt; for samples of request and response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskTest() throws ApiException {

        final InputTerm inputTerm = new InputTerm();
        final EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        inputTerm.setEntityType(entityType);
        inputTerm.setTerminology("http://snomed.info/sct");
        inputTerm.setCode("22298006");
        inputTerm.setInputType(InputTypeEnum.STRING);

        final InputTask inputTask = new InputTask();
        inputTask.addTermsItem(inputTerm);

        final OutputTask response = api.addTask(inputTask);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getTerms());
        for (final OutputTerm term : response.getTerms()) {
            assertNotNull(term.getId());
            // assertNotNull(term.getType());
            // assertNotNull(term.getSource());
            // assertNotNull(term.getTermSourceCode());
            assertEquals(entityType.toString(), term.getEntityType().toString());
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                // TODO: where is assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertEquals(entityType.toString(), mapping.getEntityType().toString());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
            }
        }
    }

    /**
     * Add an task to request mapping of included terms
     * <p>
     * &lt;a href&#x3D;\&quot;/examples/index.html\&quot;&gt;Click here&lt;/a&gt; for samples of request and response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskTestWithInactiveCode() throws ApiException {

        final InputTerm inputTerm = new InputTerm();
        final EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        inputTerm.setEntityType(entityType);
        inputTerm.setTerminology("http://snomed.info/sct");
        inputTerm.setCode("194801005");
        inputTerm.setInputType(InputTypeEnum.STRING);

        final InputTask inputTask = new InputTask();
        inputTask.addTermsItem(inputTerm);

        final OutputTask response = api.addTask(inputTask);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getTerms());
        for (final OutputTerm term : response.getTerms()) {
            assertNotNull(term.getId());
            // assertNotNull(term.getTermType());
            // assertNotNull(term.getTermSource());
            // assertNotNull(term.getTermSourceCode());
            assertEquals(entityType.toString(), term.getEntityType().toString());
            // one of the mappings should be a no target
            boolean foundNoTarget = false;
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                // TODO: where is assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertEquals(entityType.toString(), mapping.getEntityType().toString());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
                if ("no target".equalsIgnoreCase(mapping.getName())) {
                    foundNoTarget = true;
                }
            }
            assertTrue(foundNoTarget);
        }
    }

    /**
     * Add an task to request mapping of included terms
     * <p>
     * &lt;a href&#x3D;\&quot;/examples/index.html\&quot;&gt;Click here&lt;/a&gt; for samples of request and response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskTestWithInvalidCode() throws ApiException {


        final InputTerm inputTerm = new InputTerm();
        final EntityTypeEnum entityType = EntityTypeEnum.CONDITION;
        inputTerm.setEntityType(entityType);
        inputTerm.setTerminology("http://snomed.info/sct");
        inputTerm.setCode("abcdef");
        inputTerm.setInputType(InputTypeEnum.STRING);

        final InputTask inputTask = new InputTask();
        inputTask.addTermsItem(inputTerm);

        final OutputTask response = api.addTask(inputTask);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getTerms());
        for (final OutputTerm term : response.getTerms()) {
            assertNotNull(term.getId());
            // assertNotNull(term.getTermType());
            // assertNotNull(term.getTermSource());
            // assertNotNull(term.getTermSourceCode());
            for (final TermMapping mapping : term.getMappings()) {
                assertNotNull(mapping.getId());
                // TODO: where is assertNotNull(mapping.getConfidence());
                assertNotNull(mapping.getTerminology());
                assertNotNull(mapping.getName());
                assertNotNull(mapping.getEntityType());
                assertEquals(entityType.toString(), mapping.getEntityType().toString());
                assertNotNull(mapping.getStartIndex());
                assertNotNull(mapping.getEndIndex());
            }
        }
    }

    /**
     * Find tasks matching specified parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTasksTest() throws ApiException {

        final String query = "terms.term:heart";
        final Integer offset = 0;
        final Integer limit = 10;
        final String sort = null;
        final Boolean ascending = true;
        final ResultListOutputTask response = api.findTasks(query, offset, limit, sort, ascending);
        assertNotNull(response);
        assertNotNull(response.getTotal());
        assertNotNull(response.getLimit());
        assertNotNull(response.getOffset());
        assertNotNull(response.getItems());

        final List<OutputTask> tasks = response.getItems();
        for (final OutputTask task : tasks) {
            assertNotNull(task.getId());
            // assertNotNull(task.getConfidence());
            assertNotNull(task.getModified());
            assertNotNull(task.getCreated());
            assertNotNull(task.getModifiedBy());
            assertNotNull(task.getTags());
            for (final Tag tag : task.getTags()) {
                assertNotNull(tag.getKey());
                assertNotNull(tag.getValue());
            }
            for (final OutputTerm term : task.getTerms()) {
                assertNotNull(term.getId());
                assertNotNull(term.getTerm());
                // assertNotNull(term.getTermType());
                // assertNotNull(term.getTermSource());
                // assertNotNull(term.getTermSourceCode());
                for (final TermMapping mapping : term.getMappings()) {
                    assertNotNull(mapping.getId());
                    // assertNotNull(mapping.getConfidence());
                    assertNotNull(mapping.getTerminology());
                    assertNotNull(mapping.getCode());
                    assertNotNull(mapping.getName());
                    assertNotNull(mapping.getEntityType());
                    assertNotNull(mapping.getStartIndex());
                    assertNotNull(mapping.getEndIndex());
                }
            }
        }
    }
    /**
     * Find tasks matching specified parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTermsTest() throws ApiException {
        final String query = "term:heart";
        final Integer offset = null;
        final Integer limit = null;
        final String sort = null;
        final Boolean ascending = true;
        final ResultListOutputTerm response = api.findTerms(query, offset, limit, sort, ascending);

        assertNotNull(response);
        assertNotNull(response.getTotal());
        assertNotNull(response.getLimit());
        assertNotNull(response.getOffset());
        assertNotNull(response.getItems());

        final List<OutputTerm> terms = response.getItems();
        for (final OutputTerm term : terms) {
                assertNotNull(term.getId());
                assertNotNull(term.getTerm());
                // assertNotNull(term.getTermType());
                // assertNotNull(term.getTermSource());
                // assertNotNull(term.getTermSourceCode());
                for (final TermMapping mapping : term.getMappings()) {
                    assertNotNull(mapping.getId());
                    // assertNotNull(mapping.getConfidence());
                    assertNotNull(mapping.getTerminology());
                    assertNotNull(mapping.getCode());
                    assertNotNull(mapping.getName());
                    assertNotNull(mapping.getEntityType());
                    assertNotNull(mapping.getStartIndex());
                    assertNotNull(mapping.getEndIndex());
            }
        }
    }

    // /**
    //  * Get entity configuration
    //  *
    //  * @throws ApiException if the Api call fails
    //  */
    // @Test
    // public void getEntityConfigTest() throws ApiException {
    //     final List<EntityConfig> response = api.getEntityConfig();
    //     assertNotNull(response);
    //     // each will have a non-null entityType, terminology, scope, activeOnly
    //     for(final EntityConfig entityConfig : response) {
    //         assertNotNull(entityConfig.getEntityType());
    //         assertNotNull(entityConfig.getTerminology());
    //         assertNotNull(entityConfig.getScope());
    //         assertNotNull(entityConfig.getActiveOnly());

    //         // labeledScope, mapFromMap, secondaryMapToMap are Map<String, String>
    //         // validate that each has a non-null value
    //         if(entityConfig.getLabeledScope() != null) {
    //             for(final String key : entityConfig.getLabeledScope().keySet()) {
    //                 assertNotNull(entityConfig.getLabeledScope().get(key));
    //             }
    //         }
    //         if(entityConfig.getMapFromMap() != null) {
    //             for(final String key : entityConfig.getMapFromMap().keySet()) {
    //                 assertNotNull(entityConfig.getMapFromMap().get(key));
    //             }
    //         }
    //         if(entityConfig.getSecondaryMapToMap() != null) {
    //             for(final String key : entityConfig.getSecondaryMapToMap().keySet()) {
    //                 assertNotNull(entityConfig.getSecondaryMapToMap().get(key));
    //             }
    //         }
    //     }
    // }

    // metadata is hidden for now
//    /**
//     * Get application metadata
//     *
//     * @throws ApiException if the Api call fails
//     */
//    @Test
//    public void getMetadataTest() throws ApiException {
//        final HashMap<String, Map<String, String>> response = api.getMetadata();
//        assertNotNull(response);
//
//        assertNotNull(response.get("models"));
//        for(final String key : response.get("models").keySet()) {
//            assertNotNull(response.get("models").get(key));
//        }
//
//        assertNotNull(response.get("term.entityType"));
//        for(final String key : response.get("term.entityType").keySet()) {
//            assertNotNull(response.get("term.entityType").get(key));
//        }
//
//        assertNotNull(response.get("term.status"));
//        for(final String key : response.get("term.status").keySet()) {
//            assertNotNull(response.get("term.status").get(key));
//        }
//
//        assertNotNull(response.get("versions"));
//        for(final String key : response.get("versions").keySet()) {
//            assertNotNull(response.get("versions").get(key));
//        }
//
//        assertNotNull(response.get("term.inputType"));
//        for(final String key : response.get("term.inputType").keySet()) {
//            assertNotNull(response.get("term.inputType").get(key));
//        }
//    }

    /**
     * Get task object for the specified task id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTest() throws ApiException {
        // /mapping/task/{taskId}
        //String taskId = null;
        //OutputTask response = api.getTask(taskId);
        // TODO: test validations
    }

    /**
     * Get term for the specified taskId and termId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTermTest() throws ApiException {
        // /mapping/task/{taskId}/term/{termId}
        // String taskId = null;
        // String termId = null;
        // OutputTask response = api.getTaskTerm(taskId, termId);
        // TODO: test validations
    }

    /**
     * Get audit trail for the specified taskId and termId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTermAuditTrailTest() throws ApiException {
        // String taskId = null;
        // String termId = null;
        // List<AuditEntry> response = api.getTaskTermAuditTrail(taskId, termId);
        // TODO: test validations
    }

    // versions is hidden for now
//    /**
//     * Get version information for components of the application
//     *
//     * @throws ApiException if the Api call fails
//     */
//    @Test
//    public void getVersionsTest() throws ApiException {
//        final Map<String, String> response = api.getVersions();
//        assertNotNull(response);
//        for(final String key : response.keySet()) {
//            assertNotNull(response.get(key));
//        }
//    }

    // health check is hidden for now
    // /**
    //  * Get version information for components of the application
    //  *
    //  * @throws ApiException if the Api call fails
    //  */
    // @Test
    // public void healthCheckTest() throws ApiException {
    //     final HealthCheck response = api.healthCheck();
    //     assertNotNull(response);
    //     assertNotNull(response.getName());
    //     assertNotNull(response.getTimestamp());
    //     assertNotNull(response.getStatus());
    //     assertTrue(response.getStatus());
    // }

    public static void main(String[] args) {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream("/Users/squareroot/temp/find_terms.json");
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            final ResultListOutputTerm outputTaskList = objectMapper.readValue(fis, ResultListOutputTerm.class);
            System.out.println(outputTaskList);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
