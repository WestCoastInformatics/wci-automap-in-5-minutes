import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
  id 'java'
  id 'org.openapi.generator'
  id 'maven-publish'
}

group = "com.wci.automap"
version = "1.0.0-SNAPSHOT"

// Input Specification locations. When using the inputFile, make sure you've updated
// the doc with the changes you want to generate
def inputURL = 'https://automap.terminology.tools/v3/api-docs'

repositories {
  mavenCentral()
}

sourceCompatibility = 17
targetCompatibility = 17

test {
  useJUnitPlatform()
}

final artifactGroup = "${group}"
final artifactVersion = "${version}"
final artifactId = 'wci-automap-java-client'

/**
 * Builds a Java client by default: https://openapi-generator.tech/docs/generators/java/
 * To use a local file, replace {remoteInputSpec.set(inputURL)} with input {inputSpec.set(inputFile)}
*/
tasks.register('buildJavaSdk', GenerateTask) {
    generatorName.set("java")
    remoteInputSpec.set(inputURL)
    outputDir.set(layout.buildDirectory.dir("java").get().getAsFile().getAbsolutePath())
    apiPackage.set("api")
    invokerPackage.set("com.wci.automap.client.invoker")
    modelPackage.set("com.wci.automap.client.model")
    configOptions.set([
            "packageName": "automap",
            "library": "jersey3",
            "serializationLibrary": "jackson",
            "hideGenerationTimestamp": "false",
             "failOnUnknownProperties": "true",
             "java8": "false", // disables Java 8 specific code
             "dateLibrary": "java17" // or "java17" if supported by your generator version
    ])
}

/**
 * Cannot exclude from build, so remove the unwanted APIs and associated tests.
 */
tasks.register('removeUnwantedApis') {
    doLast {
        delete fileTree(
            dir: "${buildDir}/java/src/main/java/api",
            include: ['NlmApi.java', 'TerminologyApi.java']
        )
        delete fileTree(
            dir: "${buildDir}/java/src/test/java/api",
            include: ['NlmApiTest.java', 'TerminologyApiTest.java']
        )
    }
}

/**
 * Patch the generated build.gradle file to use Java 17 and the correct artifactId.
 */
tasks.register('patchGeneratedJavaVersion') {
    doLast {
        def gradleFile = file("$buildDir/java/build.gradle")
        if (gradleFile.exists()) {
            println "Patching Java version in ${gradleFile}..."
            def text = gradleFile.text
            text = text.replaceAll(
                /sourceCompatibility\s*=\s*JavaVersion\.VERSION_1_8/,
                'sourceCompatibility = JavaVersion.VERSION_17'
            ).replaceAll(
                /targetCompatibility\s*=\s*JavaVersion\.VERSION_1_8/,
                'targetCompatibility = JavaVersion.VERSION_17'
            ).replaceAll(
                /sourceCompatibility\s*=\s*['"]1\.8['"]/,
                'sourceCompatibility = \'17\''
            ).replaceAll(
                /targetCompatibility\s*=\s*['"]1\.8['"]/,
                'targetCompatibility = \'17\''
            )
            gradleFile.text = text
        } else {
            println "No generated build.gradle found at ${gradleFile}"
        }
    }
}

/**
 * Patch the generated build.gradle file to use the correct group, version, artifactId, and JAR name.
 */
tasks.register('patchGeneratedArtifactId') {
    doLast {
        def gradleFile = file("$buildDir/java/build.gradle")
        if (gradleFile.exists()) {
            println "Patching group, version, artifactId, and JAR name in ${gradleFile}..."
            def text = gradleFile.text
            text = text.replaceFirst(
                /group\s*=\s*['"].*['"]/,
                "group = '${artifactGroup}'"
            )
            text = text.replaceFirst(
                /version\s*=\s*['"].*['"]/,
                "version = '${artifactVersion}'"
            )
            text = text.replaceAll(
                /artifactId\s*=\s*['"][^'"]*['"]/,
                "artifactId = '${artifactId}'"
            )
            // Patch JAR file name
            if (text.contains('tasks.withType(Jar)')) {
                text = text.replaceAll(
                    /archiveBaseName\.set\(['"].*['"]\)/,
                    "archiveBaseName.set('${artifactId}')"
                ).replaceAll(
                    /archiveVersion\.set\(['"].*['"]\)/,
                    "archiveVersion.set('${artifactVersion}')"
                )
            } else {
                text += """
tasks.withType(Jar) {
    archiveBaseName.set('${artifactId}')
    archiveVersion.set('${artifactVersion}')
}
"""
            }
            gradleFile.text = text
        } else {
            println "No generated build.gradle found at ${gradleFile}"
        }
    }
}

tasks.register("makeGeneratedJavaSdkJar", Jar) {
    doLast {
        def generatedProjectDir = file("$buildDir/java")
        exec {
            workingDir generatedProjectDir
            commandLine "gradle", "clean", "build", "publishToMavenLocal"
        }
    }
}

/**
 * Run the tasks in the correct order.
 */
tasks.named('buildJavaSdk') {
    finalizedBy('removeUnwantedApis', 'patchGeneratedJavaVersion', 'patchGeneratedArtifactId', 'makeGeneratedJavaSdkJar')
}

/**
 * Build a python client by default: https://openapi-generator.tech/docs/generators/python/
 * To use a local file, replace {remoteInputSpec.set(inputURL)} with input {inputSpec.set(inputFile)}
 */
tasks.register('buildPythonSdk', GenerateTask) {
  generatorName.set("python")
  remoteInputSpec.set(inputURL)
  outputDir.set(layout.buildDirectory.dir("python").get().getAsFile().getAbsolutePath())
  apiPackage.set("api")
  modelPackage.set("models")
  configOptions.set([
          "packageName": "automap",
          "hideGenerationTimestamp": "false",
  ])
}

/**
 * Build a Go client by default: https://openapi-generator.tech/docs/generators/go/
 * To use a local file, replace {remoteInputSpec.set(inputURL)} with input {inputSpec.set(inputFile)}
 */
//tasks.register('buildGoSdk', GenerateTask) {
//  generatorName.set("go")
//  remoteInputSpec.set(inputURL)
//  outputDir.set("$buildDir/go")
//  apiPackage.set("com.wci.automap.api")
//  invokerPackage.set("com.wci.automap.api.invoker")
//  modelPackage.set("com.wci.automap.api.models")
//  configOptions.set([
//      "packageName": "go-examples",
//      "hideGenerationTimestamp": "false",
//  ])
//}

/**
 * Build a JS client by default: https://openapi-generator.tech/docs/generators/javascript/
 * To use a local file, replace {remoteInputSpec.set(inputURL)} with input {inputSpec.set(inputFile)}
 */
//tasks.register('buildJavascriptSdk', GenerateTask) {
//  generatorName.set("javascript")
//  remoteInputSpec.set(inputURL)
//  outputDir.set("$buildDir/javascript")
//  apiPackage.set("com.wci.automap.api")
//  invokerPackage.set("com.wci.automap.api.invoker")
//  modelPackage.set("com.wci.automap.api.models")
//  configOptions.set([
//      "packageName": "javascript-examples",
//      "hideGenerationTimestamp": "false",
//  ])
//}

/**
 * Build a bash client by default: https://openapi-generator.tech/docs/generators/bash/
 * To use a local file, replace {remoteInputSpec.set(inputURL)} with input {inputSpec.set(inputFile)}
 */
//tasks.register('buildBashSdk', GenerateTask) {
//  generatorName.set("bash")
//  remoteInputSpec.set(inputURL)
//  outputDir.set("$buildDir/bash")
//  apiPackage.set("com.wci.automap.api")
//  invokerPackage.set("com.wci.automap.api.invoker")
//  modelPackage.set("com.wci.automap.api.models")
//  configOptions.set([
//      "packageName": "bash-examples",
//      "hideGenerationTimestamp": false,
//      "generateBashCompletion": true,
//      "generateZshCompletion": true,
//      "hostEnvironmentVariable":HOST='TODO',
//  ])
//}

/** Runs all code-gen tasks for each language to generate the clients */
tasks.register("buildClients") {
  dependsOn("buildJavaSdk",
      "buildPythonSdk",
//            "buildGoSdk",
//            "buildBashSdk",
//            "buildJavascriptSdk"
  )
  doLast {
    println 'All client sdk generated. They can be found in the code-gen/build folder.'
  }
}

compileJava.dependsOn tasks.named("buildClients")
build.dependsOn("buildClients")
publishToMavenLocal.dependsOn = ["buildJavaSdk`",
                                 "buildPythonSdk",
//                                 "buildGoSdk",
//                                 "buildBashSdk",
//                                 "buildJavascriptSdk"
]
